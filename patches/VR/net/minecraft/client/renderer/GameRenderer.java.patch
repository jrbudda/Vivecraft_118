--- a/net/minecraft/client/renderer/GameRenderer.java
+++ b/net/minecraft/client/renderer/GameRenderer.java
@@ -3,24 +3,29 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.gson.JsonSyntaxException;
+import com.mojang.blaze3d.pipeline.RenderTarget;
 import com.mojang.blaze3d.platform.GLX;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.platform.Lighting;
+import com.mojang.blaze3d.platform.MemoryTracker;
 import com.mojang.blaze3d.platform.NativeImage;
 import com.mojang.blaze3d.platform.Window;
 import com.mojang.blaze3d.shaders.Program;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.blaze3d.vertex.VertexFormat;
+import com.mojang.blaze3d.vertex.VertexFormat.Mode;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import com.mojang.math.Matrix3f;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Vector3f;
 import java.io.IOException;
+import java.nio.FloatBuffer;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.List;
@@ -36,18 +41,29 @@
 import net.minecraft.client.Camera;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.Screenshot;
+import net.minecraft.client.gui.Gui;
 import net.minecraft.client.gui.MapRenderer;
 import net.minecraft.client.gui.screens.ChatScreen;
 import net.minecraft.client.gui.screens.LoadingOverlay;
 import net.minecraft.client.gui.screens.ReceivingLevelScreen;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.gui.screens.WinScreen;
+import net.minecraft.client.main.Main;
 import net.minecraft.client.player.AbstractClientPlayer;
+import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.client.renderer.block.model.ItemTransforms;
+import net.minecraft.client.renderer.entity.ItemRenderer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.resources.language.I18n;
+import net.minecraft.client.resources.model.ModelBakery;
+import net.minecraft.client.resources.model.ModelResourceLocation;
 import net.minecraft.client.server.IntegratedServer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
+import net.minecraft.core.Vec3i;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
@@ -55,7 +71,9 @@
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 import net.minecraft.server.packs.resources.ResourceProvider;
+import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
+import net.minecraft.world.InteractionHand;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
@@ -66,6 +84,7 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
@@ -77,10 +96,13 @@
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import net.minecraftforge.resource.IResourceType;
+import net.minecraftforge.resource.VanillaResourceType;
 import net.optifine.Config;
 import net.optifine.GlErrors;
 import net.optifine.Lagometer;
 import net.optifine.RandomEntities;
+import net.optifine.SmartAnimations;
 import net.optifine.entity.model.CustomEntityModels;
 import net.optifine.gui.GuiChatOF;
 import net.optifine.reflect.Reflector;
@@ -91,6 +113,23 @@
 import net.optifine.util.MemoryMonitor;
 import net.optifine.util.TimedEvent;
 import org.slf4j.Logger;
+import org.apache.commons.lang3.tuple.Triple;
+import org.lwjgl.opengl.GL11;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.VRData;
+import org.vivecraft.gameplay.VRPlayer;
+import org.vivecraft.gameplay.screenhandlers.GuiHandler;
+import org.vivecraft.gameplay.screenhandlers.KeyboardHandler;
+import org.vivecraft.gameplay.screenhandlers.RadialHandler;
+import org.vivecraft.gameplay.trackers.BowTracker;
+import org.vivecraft.gameplay.trackers.TelescopeTracker;
+import org.vivecraft.provider.ControllerType;
+import org.vivecraft.reflection.MCReflection;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.render.VRCamera;
+import org.vivecraft.render.VRWidgetHelper;
+import org.vivecraft.settings.VRSettings;
+import org.vivecraft.utils.Utils;
 
 public class GameRenderer implements ResourceManagerReloadListener, AutoCloseable
 {
@@ -133,7 +172,9 @@
     public static final int EFFECT_NONE = EFFECTS.length;
     private int effectIndex = EFFECT_NONE;
     private boolean effectActive;
-    private final Camera mainCamera = new Camera();
+    //Vivecraft
+    private final Camera mainCamera = new VRCamera();
+    //
     public ShaderInstance blitShader;
     private final Map<String, ShaderInstance> shaders = Maps.newHashMap();
     @Nullable
@@ -246,7 +287,7 @@
     private static ShaderInstance rendertypeCrumblingShader;
     private boolean initialized = false;
     private Level updatedWorld = null;
-    private float clipDistance = 128.0F;
+    public float clipDistance = 128.0F;
     private long lastServerTime = 0L;
     private int lastServerTicks = 0;
     private int serverWaitTime = 0;
@@ -255,6 +296,47 @@
     private float avgServerTickDiff = 0.0F;
     private PostChain[] fxaaShaders = new PostChain[10];
     private boolean guiLoadingVisible = false;
+    //Vivecraft additions ********
+    public float minClipDistance = 0.02F;
+    public Vec3 crossVec;
+    private FloatBuffer matrixBuffer = MemoryTracker.create(16).asFloatBuffer();
+    public Matrix4f thirdPassProjectionMatrix = new Matrix4f();
+    public boolean menuWorldFastTime;
+    public boolean inwater;
+    public boolean wasinwater;
+    public boolean inportal;
+    public boolean onfire;
+    public float inBlock = 0.0F;
+    private boolean always_true = true;
+    public double rveX;
+    public double rveY;
+    public double rveZ;
+    public double rvelastX;
+    public double rvelastY;
+    public double rvelastZ;
+    public double rveprevX;
+    public double rveprevY;
+    public double rveprevZ;
+    public float rveyaw;
+    public float rvepitch;
+    private float rvelastyaw;
+    private float rvelastpitch;
+    private float rveHeight;
+    private boolean cached;
+    private int polyblendsrca;
+    private int polyblenddsta;
+    private int polyblendsrcrgb;
+    private int polyblenddstrgb;
+    private net.optifine.shaders.Program prog;
+    private boolean polyblend;
+    private boolean polytex;
+    private boolean polylight;
+    private boolean polycull;
+    public static final ModelResourceLocation thirdPersonCameraModel = new ModelResourceLocation("vivecraft:camcorder");
+    public static final ModelResourceLocation thirdPersonCameraDisplayModel = new ModelResourceLocation("vivecraft:camcorder_display");
+    Vec3i tpUnlimitedColor = new Vec3i(-83, -40, -26);
+    Vec3i tpLimitedColor = new Vec3i(-51, -87, -51);
+    Vec3i tpInvalidColor = new Vec3i(83, 83, 83);
 
     public GameRenderer(Minecraft pMinecraft, ResourceManager pResourceManager, RenderBuffers pRenderBuffers)
     {
@@ -265,6 +347,13 @@
         this.lightTexture = new LightTexture(this, pMinecraft);
         this.renderBuffers = pRenderBuffers;
         this.postEffect = null;
+
+        //Vivecraft, know in the log if a mod replaces GameRenderer
+        if (this.minecraft.gameRenderer != null)
+        {
+            System.out.println("**********NEW GAME RENDERER ***********");
+            Thread.dumpStack();
+        }
     }
 
     public void close()
@@ -778,13 +867,16 @@
     {
         Entity entity = this.minecraft.getCameraEntity();
 
-        if (entity != null && this.minecraft.level != null)
+        if (entity != null && this.minecraft.level != null && this.minecraft.vrPlayer.vrdata_world_render != null)
         {
             this.minecraft.getProfiler().push("pick");
             this.minecraft.crosshairPickEntity = null;
             double d0 = (double)this.minecraft.gameMode.getPickRange();
-            this.minecraft.hitResult = entity.pick(d0, pPartialTicks, false);
-            Vec3 vec3 = entity.getEyePosition(pPartialTicks);
+            //Vivecraft override raytrace
+            this.minecraft.hitResult = this.minecraft.vrPlayer.rayTraceBlocksVR(this.minecraft.vrPlayer.vrdata_world_render, 0, d0, false);
+            this.crossVec = this.minecraft.vrPlayer.AimedPointAtDistance(this.minecraft.vrPlayer.vrdata_world_render, 0, d0);
+            Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getController(0).getPosition();
+            //
             boolean flag = false;
             int i = 3;
             double d1 = d0;
@@ -810,14 +902,16 @@
             {
                 d1 = this.minecraft.hitResult.getLocation().distanceToSqr(vec3);
             }
-
-            Vec3 vec31 = entity.getViewVector(1.0F);
+            //Vivecraft
+            Vec3 vec31 = this.minecraft.vrPlayer.vrdata_world_render.getController(0).getDirection();
+            //
             Vec3 vec32 = vec3.add(vec31.x * d0, vec31.y * d0, vec31.z * d0);
             float f = 1.0F;
             AABB aabb = entity.getBoundingBox().expandTowards(vec31.scale(d0)).inflate(1.0D, 1.0D, 1.0D);
             EntityHitResult entityhitresult = ProjectileUtil.getEntityHitResult(entity, vec3, vec32, aabb, (entityIn) ->
             {
-                return !entityIn.isSpectator() && entityIn.isPickable();
+            	//Vivecraft add riding check in case your hand is somewhere inappropriate.
+                return !entityIn.isSpectator() && entityIn.isPickable() && !(entityIn == this.minecraft.getCameraEntity().getVehicle());
             }, d1);
 
             if (entityhitresult != null)
@@ -871,7 +965,11 @@
 
     public double getFov(Camera pActiveRenderInfo, float pPartialTicks, boolean pUseFOVSetting)
     {
-        if (this.panoramicMode)
+        if (this.minecraft.level == null)
+        {     // Vivecraft: using this on the main menu
+            return this.minecraft.options.fov;
+        }
+        else if (this.panoramicMode)
         {
             return 90.0D;
         }
@@ -1062,25 +1160,56 @@
         RenderSystem.setProjectionMatrix(pMatrix);
     }
 
+    //Vivecraft modify this to always return the correct matrix for the pass.
     public Matrix4f getProjectionMatrix(double p_172717_)
     {
         PoseStack posestack = new PoseStack();
-        posestack.last().pose().setIdentity();
 
         if (Config.isShaders() && Shaders.isRenderingFirstPersonHand())
         {
             Shaders.applyHandDepth(posestack);
         }
 
-        this.clipDistance = this.renderDistance + 1024.0F;
+        setupClipPlanes();
 
-        if (this.zoom != 1.0F)
+        if (this.minecraft.currentPass == RenderPass.LEFT) 
+        {
+        	 posestack.mulPoseMatrix(this.minecraft.vrRenderer.eyeproj[0]);
+        }
+        else if (this.minecraft.currentPass == RenderPass.RIGHT)
+        {
+        	posestack.mulPoseMatrix(this.minecraft.vrRenderer.eyeproj[1]);
+        }
+        else if (this.minecraft.currentPass == RenderPass.THIRD)
+        {
+            if (this.minecraft.vrSettings.displayMirrorMode == VRSettings.MirrorMode.MIXED_REALITY)
+            {
+            	posestack.mulPoseMatrix(Matrix4f.perspective((double)this.minecraft.vrSettings.mixedRealityFov, this.minecraft.vrSettings.mixedRealityAspectRatio, this.minClipDistance, this.clipDistance));
+            }
+            else
+            {
+            	posestack.mulPoseMatrix(Matrix4f.perspective((double)this.minecraft.vrSettings.mixedRealityFov, (float)this.minecraft.getWindow().getScreenWidth() / (float)this.minecraft.getWindow().getScreenHeight(), this.minClipDistance, this.clipDistance));
+            }
+            this.thirdPassProjectionMatrix = new Matrix4f(posestack.last().pose());
+        }
+        else if (this.minecraft.currentPass == RenderPass.CAMERA)
+        {
+        	posestack.mulPoseMatrix(Matrix4f.perspective((double)this.minecraft.vrSettings.handCameraFov, (float)this.minecraft.vrRenderer.cameraFramebuffer.viewWidth / (float)this.minecraft.vrRenderer.cameraFramebuffer.viewHeight, this.minClipDistance, this.clipDistance));
+        }
+        else if (this.minecraft.currentPass == RenderPass.SCOPEL || this.minecraft.currentPass == RenderPass.SCOPER)
         {
-            posestack.translate((double)this.zoomX, (double)(-this.zoomY), 0.0D);
-            posestack.scale(this.zoom, this.zoom, 1.0F);
+        	posestack.mulPoseMatrix(Matrix4f.perspective(70f/8f, 1.0F, 0.05F, this.clipDistance));
+        }
+        else 
+        { //vanilla, center
+            if (this.zoom != 1.0F)
+            {
+                posestack.translate((double)this.zoomX, (double)(-this.zoomY), 0.0D);
+                posestack.scale(this.zoom, this.zoom, 1.0F);
+            }
+            posestack.mulPoseMatrix(Matrix4f.perspective(p_172717_, (float)this.minecraft.getWindow().getScreenWidth() / (float)this.minecraft.getWindow().getScreenHeight(), 0.05F, this.clipDistance));
         }
 
-        posestack.last().pose().multiply(Matrix4f.perspective(p_172717_, (float)this.minecraft.getWindow().getWidth() / (float)this.minecraft.getWindow().getHeight(), 0.05F, this.clipDistance));
         return posestack.last().pose();
     }
 
@@ -1097,33 +1226,48 @@
 
     public void render(float pPartialTicks, long pNanoTime, boolean p_109096_)
     {
-        this.frameInit();
-
-        if (!this.minecraft.isWindowActive() && this.minecraft.options.pauseOnLostFocus && (!this.minecraft.options.touchscreen || !this.minecraft.mouseHandler.isRightPressed()))
-        {
-            if (Util.getMillis() - this.lastActiveTime > 500L)
-            {
-                this.minecraft.pauseGame(false);
-            }
-        }
-        else
-        {
-            this.lastActiveTime = Util.getMillis();
-        }
+    	if (this.minecraft.currentPass == RenderPass.LEFT)
+    	{
+    		this.frameInit();
+
+    		if (!this.always_true && !this.minecraft.isWindowActive() && this.minecraft.options.pauseOnLostFocus && (!this.minecraft.options.touchscreen || !this.minecraft.mouseHandler.isRightPressed()))
+    		{
+    			if (Util.getMillis() - this.lastActiveTime > 500L)
+    			{
+    				this.minecraft.pauseGame(false);
+    			}
+    		}
+    		else
+    		{
+    			this.lastActiveTime = Util.getMillis();
+    		}
+    	}
 
         if (!this.minecraft.noRender)
         {
             int i = (int)(this.minecraft.mouseHandler.xpos() * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth());
             int j = (int)(this.minecraft.mouseHandler.ypos() * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight());
+        	RenderSystem.viewport(0, 0, this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight());
+            
+    		this.resetProjectionMatrix(this.getProjectionMatrix(minecraft.options.fov));
+            RenderSystem.getModelViewStack().setIdentity();
+            RenderSystem.applyModelViewMatrix();
 
             if (p_109096_ && this.minecraft.level != null && !Config.isReloadingResources())
             {
                 this.minecraft.getProfiler().push("level");
-                this.renderLevel(pPartialTicks, pNanoTime, new PoseStack());
+                PoseStack posestack = new PoseStack();
+                this.renderLevel(pPartialTicks, pNanoTime, posestack);
+                
+                if (this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA)
+        		{
+        			this.renderFaceOverlay(pPartialTicks, posestack);
+        		}
+                
                 this.tryTakeScreenshotIfNeeded();
                 this.minecraft.levelRenderer.doEntityOutline();
 
-                if (this.postEffect != null && this.effectActive)
+        		if (this.postEffect != null && this.effectActive && this.minecraft.currentPass != RenderPass.THIRD)
                 {
                     RenderSystem.disableBlend();
                     RenderSystem.disableDepthTest();
@@ -1135,7 +1279,37 @@
 
                 this.minecraft.getMainRenderTarget().bindWrite(true);
             }
-            else
+        	else {
+        		//In the main menu room
+        		this.minecraft.getProfiler().push("MainMenu");
+        		GL11.glDisable(GL11.GL_STENCIL_TEST);
+        		
+        		PoseStack pMatrixStack = new PoseStack();
+        		applyVRModelView(this.minecraft.currentPass, pMatrixStack);
+        		this.renderGuiLayer(pPartialTicks, true, pMatrixStack);
+
+        		if (KeyboardHandler.Showing)
+        		{
+        			if (this.minecraft.vrSettings.physicalKeyboard)
+        			{
+        				this.renderPhysicalKeyboard(pPartialTicks, pMatrixStack);
+        			}
+                    else
+                    {
+        				this.render2D(pPartialTicks, KeyboardHandler.Framebuffer, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room, false, pMatrixStack);
+        			}
+        		}
+
+        		if ((this.minecraft.currentPass != RenderPass.THIRD || this.minecraft.vrSettings.mixedRealityRenderHands) && this.minecraft.currentPass != RenderPass.CAMERA)
+        		{
+        			this.renderVRHands(pPartialTicks, true, true, true, true, pMatrixStack);
+        		}
+        	}
+
+        	this.minecraft.getProfiler().pop();
+        }
+            
+            /*	Vivecraft nope, do all this in drawFramebuffer
             {
                 RenderSystem.viewport(0, 0, this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight());
             }
@@ -1293,7 +1467,7 @@
         {
             this.minecraft.options.renderDebugCharts = true;
         }
-    }
+    */}
 
     private void tryTakeScreenshotIfNeeded()
     {
@@ -1368,9 +1542,9 @@
 
                     nativeimage1.close();
                 }
-                catch (IOException ioexception1)
+                catch (IOException ioexception)
                 {
-                    LOGGER.warn("Couldn't save auto screenshot", (Throwable)ioexception1);
+                    LOGGER.warn("Couldn't save auto screenshot", (Throwable)ioexception);
                 }
                 finally {
                     nativeimage.close();
@@ -1379,13 +1553,10 @@
         }
     }
 
+    //Vivecraft modify
     private boolean shouldRenderBlockOutline()
     {
-        if (!this.renderBlockOutline)
-        {
-            return false;
-        }
-        else
+        if (this.renderBlockOutline && (!this.minecraft.options.hideGui || this.minecraft.vrSettings.renderBlockOutlineMode != VRSettings.RenderPointerElement.WITH_HUD) && this.minecraft.vrSettings.renderBlockOutlineMode != VRSettings.RenderPointerElement.NEVER && !this.minecraft.teleportTracker.isAiming())
         {
             Entity entity = this.minecraft.getCameraEntity();
             boolean flag = entity instanceof Player && !this.minecraft.options.hideGui;
@@ -1415,18 +1586,42 @@
 
             return flag;
         }
+        else
+        {
+            return false;
+        }
     }
-
+    //Vivecraft modify heavily
     public void renderLevel(float pPartialTicks, long pFinishTimeNano, PoseStack p_109092_)
     {
-        this.lightTexture.updateLightTexture(pPartialTicks);
+        if (this.minecraft.currentPass == RenderPass.LEFT)
+        {
+            this.lightTexture.updateLightTexture(pPartialTicks);
+        }
 
         if (this.minecraft.getCameraEntity() == null)
         {
             this.minecraft.setCameraEntity(this.minecraft.player);
         }
 
-        this.pick(pPartialTicks);
+        if (this.minecraft.currentPass == RenderPass.LEFT)
+        {
+            this.pick(pPartialTicks);
+
+            if (this.minecraft.hitResult != null && this.minecraft.hitResult.getType() != HitResult.Type.MISS)
+            {
+                this.crossVec = this.minecraft.hitResult.getLocation();
+            }
+
+            if (this.minecraft.screen == null)
+            {
+                this.minecraft.teleportTracker.updateTeleportDestinations(this, this.minecraft, this.minecraft.player);
+            }
+        }
+
+        this.cacheRVEPos((LivingEntity)this.minecraft.getCameraEntity());
+        this.setupRVE();
+        this.setupOverlayStatus(pPartialTicks);
 
         if (Config.isShaders())
         {
@@ -1454,12 +1649,12 @@
         {
             posestack = p_109092_;
         }
-
-        this.bobHurt(posestack, pPartialTicks);
+        //no plz
+        //this.bobHurt(posestack, pPartialTicks);
 
         if (this.minecraft.options.bobView)
-        {
-            this.bobView(posestack, pPartialTicks);
+        { //no plz
+            //this.bobView(posestack, pPartialTicks);
         }
 
         float f = Mth.lerp(pPartialTicks, this.minecraft.player.oPortalTime, this.minecraft.player.portalTime) * this.minecraft.options.screenEffectScale * this.minecraft.options.screenEffectScale;
@@ -1469,6 +1664,10 @@
             int i = this.minecraft.player.hasEffect(MobEffects.CONFUSION) ? 7 : 20;
             float f1 = 5.0F / (f * f + 5.0F) - f * 0.04F;
             f1 *= f1;
+        	//Vivecraft tone that shit down
+        	i = i / 5;
+        	f1 = 1.1f;
+        	//
             Vector3f vector3f = new Vector3f(0.0F, Mth.SQRT_OF_TWO / 2.0F, Mth.SQRT_OF_TWO / 2.0F);
             posestack.mulPose(vector3f.rotationDegrees(((float)this.tick + pPartialTicks) * (float)i));
             posestack.scale(1.0F / f1, 1.0F, 1.0F);
@@ -1487,16 +1686,22 @@
 
         if (Reflector.ForgeHooksClient_onCameraSetup.exists())
         {
-            Object object = Reflector.ForgeHooksClient_onCameraSetup.call(this, camera, pPartialTicks);
-            float f4 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getYaw);
-            float f5 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getPitch);
-            float f3 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getRoll);
-            camera.setAnglesInternal(f4, f5);
-            p_109092_.mulPose(Vector3f.ZP.rotationDegrees(f3));
+        	if(minecraft.currentPass != RenderPass.LEFT && minecraft.currentPass != RenderPass.RIGHT) {
+        		//do what you want, mods, just dont do it to my eyeballs.
+	            Object object = Reflector.ForgeHooksClient_onCameraSetup.call(this, camera, pPartialTicks);
+	            float f4 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getYaw);
+	            float f5 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getPitch);
+	            float f3 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getRoll);
+	            camera.setAnglesInternal(f4, f5);
+	            p_109092_.mulPose(Vector3f.ZP.rotationDegrees(f3));
+            }
         }
 
-        p_109092_.mulPose(Vector3f.XP.rotationDegrees(camera.getXRot()));
-        p_109092_.mulPose(Vector3f.YP.rotationDegrees(camera.getYRot() + 180.0F));
+        applyVRModelView(minecraft.currentPass, p_109092_); //this is just rotation.
+        //this is not the way
+
+        //p_109092_.mulPose(Vector3f.XP.rotationDegrees(camera.getXRot()));
+        //p_109092_.mulPose(Vector3f.YP.rotationDegrees(camera.getYRot() + 180.0F));
         Matrix3f matrix3f = p_109092_.last().normal().copy();
 
         if (matrix3f.invert())
@@ -1513,26 +1718,13 @@
             Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, this.minecraft.levelRenderer, p_109092_, pPartialTicks, matrix4f, pFinishTimeNano);
         }
 
-        this.minecraft.getProfiler().popPush("hand");
+        boolean flag2 = false;
+        GL11.glDisable(GL11.GL_STENCIL_TEST);
+        this.minecraft.getProfiler().popPush("ShadersEnd");
 
-        if (this.renderHand && !Shaders.isShadowPass)
+        if (flag && !flag2 && this.renderHand && !Shaders.isShadowPass)
         {
-            if (flag)
-            {
-                ShadersRender.renderHand1(this, p_109092_, camera, pPartialTicks);
-                Shaders.renderCompositeFinal();
-            }
-
-            RenderSystem.clear(256, Minecraft.ON_OSX);
-
-            if (flag)
-            {
-                ShadersRender.renderFPOverlay(this, p_109092_, camera, pPartialTicks);
-            }
-            else
-            {
-                this.renderItemInHand(p_109092_, camera, pPartialTicks);
-            }
+            Shaders.renderCompositeFinal();
         }
 
         if (flag)
@@ -1540,6 +1732,7 @@
             Shaders.endRender();
         }
 
+        this.restoreRVEPos((LivingEntity)this.minecraft.getCameraEntity());
         this.minecraft.getProfiler().pop();
     }
 
@@ -1652,8 +1845,6 @@
 
         if (!this.initialized)
         {
-            ReflectorResolver.resolve();
-
             if (Config.getBitsOs() == 64 && Config.getBitsJre() == 32)
             {
                 Config.setNotify64BitJava(true);
@@ -1779,11 +1970,17 @@
             float f5 = this.itemActivationOffX * (float)(pWidthsp / 4);
             float f6 = this.itemActivationOffY * (float)(pHeightScaled / 4);
             RenderSystem.enableDepthTest();
+            //
+            RenderSystem.depthFunc(GL11.GL_ALWAYS);
+            
             RenderSystem.disableCull();
             PoseStack posestack = new PoseStack();
             posestack.pushPose();
-            posestack.translate((double)((float)(pWidthsp / 2) + f5 * Mth.abs(Mth.sin(f4 * 2.0F))), (double)((float)(pHeightScaled / 2) + f6 * Mth.abs(Mth.sin(f4 * 2.0F))), -50.0D);
-            float f7 = 50.0F + 175.0F * Mth.sin(f4);
+            //edit translate
+            posestack.translate(0, 0, -1);
+            //posestack.translate((double)((float)(pWidthsp / 2) + f5 * Mth.abs(Mth.sin(f4 * 2.0F))), (double)((float)(pHeightScaled / 2) + f6 * Mth.abs(Mth.sin(f4 * 2.0F))), -50.0D);
+            float f7 = 0.0F + -1.2F * Mth.sin(f4);
+            //edit scale
             posestack.scale(f7, -f7, f7);
             posestack.mulPose(Vector3f.YP.rotationDegrees(900.0F * Mth.abs(Mth.sin(f4))));
             posestack.mulPose(Vector3f.XP.rotationDegrees(6.0F * Mth.cos(f * 8.0F)));
@@ -1794,6 +1991,8 @@
             multibuffersource$buffersource.endBatch();
             RenderSystem.enableCull();
             RenderSystem.disableDepthTest();
+            //
+            RenderSystem.depthFunc(GL11.GL_LEQUAL);
         }
     }
 
@@ -2184,4 +2383,2254 @@
     {
         return rendertypeCrumblingShader;
     }
+    
+    //VIVECRAFT ADDITIONS *********************************************************
+
+    public void drawSizedQuad(float displayWidth, float displayHeight, float size, float[] color)
+	{
+	    float f = displayHeight / displayWidth;
+	    BufferBuilder bufferbuilder = Tesselator.getInstance().getBuilder();
+	    bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
+	    bufferbuilder.vertex((double)(-(size / 2.0F)), (double)(-(size * f) / 2.0F), 0.0D).uv(0.0F, 0.0F).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.vertex((double)(size / 2.0F), (double)(-(size * f) / 2.0F), 0.0D).uv(1.0F, 0.0F).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.vertex((double)(size / 2.0F), (double)(size * f / 2.0F), 0.0D).uv(1.0F, 1.0F).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.vertex((double)(-(size / 2.0F)), (double)(size * f / 2.0F), 0.0D).uv(0.0F, 1.0F).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.end();
+	    BufferUploader.end(bufferbuilder);
+	}
+
+    public void drawSizedQuad(float displayWidth, float displayHeight, float size, float[] color, Matrix4f pMatrix)
+	{
+		RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+	    float f = displayHeight / displayWidth;
+	    BufferBuilder bufferbuilder = Tesselator.getInstance().getBuilder();
+	    bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
+	    bufferbuilder.vertex(pMatrix, (-(size / 2.0F)), (-(size * f) / 2.0F), 0).uv(0.0F, 0.0F).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.vertex(pMatrix, (size / 2.0F), (-(size * f) / 2.0F), 0).uv(1.0F, 0.0F).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.vertex(pMatrix, (size / 2.0F), (size * f / 2.0F), 0).uv(1.0F, 1.0F).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.vertex(pMatrix, (-(size / 2.0F)), (size * f / 2.0F), 0).uv(0.0F, 1.0F).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.end();
+	    BufferUploader.end(bufferbuilder);
+	}
+	public void drawSizedQuad(float displayWidth, float displayHeight, float size)
+	{
+	    this.drawSizedQuad(displayWidth, displayHeight, size, new float[] {1,1,1,1});
+	}
+
+	public void drawSizedQuadWithLightmap(float displayWidth, float displayHeight, float size, int lighti, float[] color, Matrix4f pMatrix)
+	{
+        RenderSystem.setShader(GameRenderer::getRendertypeCutoutShader);
+	    float f = displayHeight / displayWidth;
+	    this.lightTexture.turnOnLightLayer();
+	    BufferBuilder bufferbuilder = Tesselator.getInstance().getBuilder();
+	    bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_TEX_LMAP_COLOR_NORMAL);
+	    bufferbuilder.vertex(pMatrix,(-(size / 2.0F)), (-(size * f) / 2.0F), 0).uv(0.0F, 0.0F).uv2(lighti).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.vertex(pMatrix,(size / 2.0F), (-(size * f) / 2.0F), 0).uv(1.0F, 0.0F).uv2(lighti).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.vertex(pMatrix,(size / 2.0F), (size * f / 2.0F), 0).uv(1.0F, 1.0F).uv2(lighti).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.vertex(pMatrix,(-(size / 2.0F)), (size * f / 2.0F), 0).uv(0.0F, 1.0F).uv2(lighti).color(color[0], color[1], color[2], color[3]).normal(0.0F, 0.0F, 1.0F).endVertex();
+	    bufferbuilder.end();
+	    BufferUploader.end(bufferbuilder);
+	    this.lightTexture.turnOffLightLayer();
+	}
+
+	public void drawSizedQuadWithLightmap(float displayWidth, float displayHeight, float size, int lighti, Matrix4f pMatrix)
+	{
+	    this.drawSizedQuadWithLightmap(displayWidth, displayHeight, size, lighti, new float[] {1,1,1,1}, pMatrix);
+	}
+
+	public void drawScreen(float par1, Screen screen, PoseStack matrixstack)
+	{
+        PoseStack posestack = RenderSystem.getModelViewStack();
+        posestack.pushPose();
+		    posestack.setIdentity();
+		    posestack.translate(0.0D, 0.0D, -2000.0D);
+		    RenderSystem.applyModelViewMatrix();
+		    RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+		    screen.render(matrixstack, 0, 0, par1);
+		    RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+	    posestack.popPose();
+	    RenderSystem.applyModelViewMatrix();
+	    
+	    this.minecraft.getMainRenderTarget().bindRead();
+	    this.minecraft.getMainRenderTarget().genMipMaps();
+	    this.minecraft.getMainRenderTarget().unbindRead();
+	}
+
+	private void renderTeleportArc(VRPlayer vrPlayer, PoseStack poseStack)
+	{
+	    if (this.minecraft.teleportTracker.vrMovementStyle.showBeam && this.minecraft.teleportTracker.isAiming() && this.minecraft.teleportTracker.movementTeleportArcSteps > 1)
+	    {
+	        this.minecraft.getProfiler().push("teleportArc");
+	        boolean flag = Config.isShaders();
+	        RenderSystem.enableCull();
+	        RenderSystem.setShader(GameRenderer::getPositionColorShader);
+  	        // Shaders goes crazy without this	        
+	        minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+	        
+	        RenderSystem.setShaderTexture(0, new ResourceLocation("vivecraft:textures/white.png"));
+	        RenderSystem.setShaderColor(1, 1, 1, 1);
+
+	        Tesselator tesselator = Tesselator.getInstance();
+	        tesselator.getBuilder().begin(Mode.QUADS, DefaultVertexFormat.POSITION_COLOR_NORMAL);
+	        double d0 = this.minecraft.teleportTracker.lastTeleportArcDisplayOffset;
+	        Vec3 vec3 = this.minecraft.teleportTracker.getDestination();
+	        boolean flag1 = vec3.x != 0.0D || vec3.y != 0.0D || vec3.z != 0.0D;
+	        byte b0 = -1;
+	        Vec3i vec3i;
+	
+	        if (!flag1)
+	        {
+	            vec3i = new Vec3i(83, 75, 83);
+	            b0 = -128;
+	        }
+	        else
+	        {
+	            if (NetworkHelper.isLimitedSurvivalTeleport() && !this.minecraft.player.getAbilities().mayfly)
+	            {
+	                vec3i = this.tpLimitedColor;
+	            }
+	            else
+	            {
+	                vec3i = this.tpUnlimitedColor;
+	            }
+	
+	            d0 = this.minecraft.vrRenderer.getCurrentTimeSecs() * (double)this.minecraft.teleportTracker.vrMovementStyle.textureScrollSpeed * 0.6D;
+	            this.minecraft.teleportTracker.lastTeleportArcDisplayOffset = d0;
+	        }
+	
+	        float f = this.minecraft.teleportTracker.vrMovementStyle.beamHalfWidth * 0.15F;
+	        int i = this.minecraft.teleportTracker.movementTeleportArcSteps - 1;
+	
+	        if (this.minecraft.teleportTracker.vrMovementStyle.beamGrow)
+	        {
+	            i = (int)((double)i * this.minecraft.teleportTracker.movementTeleportProgress);
+	        }
+	
+	        double d1 = 1.0D / (double)i;
+	        Vec3 vec31 = new Vec3(0.0D, 1.0D, 0.0D);
+	
+	        for (int j = 0; j < i; ++j)
+	        {
+	            double d2 = (double)j / (double)i + d0 * d1;
+	            int k = Mth.floor(d2);
+	            d2 = d2 - (double)((float)k);
+	            Vec3 vec32 = this.minecraft.teleportTracker.getInterpolatedArcPosition((float)(d2 - d1 * (double)0.4F)).subtract(this.minecraft.getCameraEntity().position());
+	            Vec3 vec33 = this.minecraft.teleportTracker.getInterpolatedArcPosition((float)d2).subtract(this.minecraft.getCameraEntity().position());
+	            float f2 = (float)d2 * 2.0F;
+	            this.renderBox(tesselator, vec32, vec33, -f, f, (-1.0F + f2) * f, (1.0F + f2) * f, vec31, vec3i, b0, poseStack);
+	        }
+	
+	        tesselator.end();
+	        RenderSystem.disableCull();
+	
+	        if (flag1 && this.minecraft.teleportTracker.movementTeleportProgress >= 1.0D)
+	        {
+	            Vec3 vec34 = (new Vec3(vec3.x, vec3.y, vec3.z)).subtract(this.minecraft.getCameraEntity().position());
+	            int l = 1;
+	            float f1 = 0.01F;
+	            double d4 = 0.0D;
+	            double d5 = 0.0D;
+	            double d3 = 0.0D;
+	
+	            if (l == 0)
+	            {
+	                d5 -= (double)f1;
+	            }
+	
+	            if (l == 1)
+	            {
+	                d5 += (double)f1;
+	            }
+	
+	            if (l == 2)
+	            {
+	                d3 -= (double)f1;
+	            }
+	
+	            if (l == 3)
+	            {
+	                d3 += (double)f1;
+	            }
+	
+	            if (l == 4)
+	            {
+	                d4 -= (double)f1;
+	            }
+	
+	            if (l == 5)
+	            {
+	                d4 += (double)f1;
+	            }
+	
+	            this.renderFlatQuad(vec34.add(d4, d5, d3), 0.6F, 0.6F, 0.0F, (int)((double)vec3i.getX() * 1.03D), (int)((double)vec3i.getY() * 1.03D), (int)((double)vec3i.getZ() * 1.03D), 64, poseStack);
+	
+	            if (l == 0)
+	            {
+	                d5 -= (double)f1;
+	            }
+	
+	            if (l == 1)
+	            {
+	                d5 += (double)f1;
+	            }
+	
+	            if (l == 2)
+	            {
+	                d3 -= (double)f1;
+	            }
+	
+	            if (l == 3)
+	            {
+	                d3 += (double)f1;
+	            }
+	
+	            if (l == 4)
+	            {
+	                d4 -= (double)f1;
+	            }
+	
+	            if (l == 5)
+	            {
+	                d4 += (double)f1;
+	            }
+	
+	            this.renderFlatQuad(vec34.add(d4, d5, d3), 0.4F, 0.4F, 0.0F, (int)((double)vec3i.getX() * 1.04D), (int)((double)vec3i.getY() * 1.04D), (int)((double)vec3i.getZ() * 1.04D), 64, poseStack);
+	
+	            if (l == 0)
+	            {
+	                d5 -= (double)f1;
+	            }
+	
+	            if (l == 1)
+	            {
+	                d5 += (double)f1;
+	            }
+	
+	            if (l == 2)
+	            {
+	                d3 -= (double)f1;
+	            }
+	
+	            if (l == 3)
+	            {
+	                d3 += (double)f1;
+	            }
+	
+	            if (l == 4)
+	            {
+	                d4 -= (double)f1;
+	            }
+	
+	            if (l == 5)
+	            {
+	                d4 += (double)f1;
+	            }
+	
+	            this.renderFlatQuad(vec34.add(d4, d5, d3), 0.2F, 0.2F, 0.0F, (int)((double)vec3i.getX() * 1.05D), (int)((double)vec3i.getY() * 1.05D), (int)((double)vec3i.getZ() * 1.05D), 64, poseStack);
+	        }
+	
+	        this.minecraft.getProfiler().pop();
+	        RenderSystem.enableCull();
+	    }
+	}
+
+	public boolean shouldRenderCrosshair()
+	{
+	    if (Main.viewonly)
+	    {
+	        return false;
+	    }
+	    else if (this.minecraft.level == null)
+	    {
+	        return false;
+	    }
+	    else if (this.minecraft.screen != null)
+	    {
+	        return false;
+	    }
+	    else
+	    {
+	        boolean flag = this.minecraft.vrSettings.renderInGameCrosshairMode == VRSettings.RenderPointerElement.ALWAYS ||
+                    (this.minecraft.vrSettings.renderInGameCrosshairMode == VRSettings.RenderPointerElement.WITH_HUD && !this.minecraft.options.hideGui);
+	
+	        if (!flag)
+	        {
+	            return false;
+	        }
+	        else if (this.minecraft.currentPass == RenderPass.THIRD)
+	        {
+	            return false;
+	        }
+	        else if (this.minecraft.currentPass != RenderPass.SCOPEL && this.minecraft.currentPass != RenderPass.SCOPER)
+	        {
+	            if (this.minecraft.currentPass == RenderPass.CAMERA)
+	            {
+	                return false;
+	            }
+	            else if (KeyboardHandler.Showing)
+	            {
+	                return false;
+	            }
+	            else if (RadialHandler.isUsingController(ControllerType.RIGHT))
+	            {
+	                return false;
+	            }
+	            else if (this.minecraft.bowTracker.isNotched())
+	            {
+	                return false;
+	            }
+	            else if (!this.minecraft.vr.getInputAction(this.minecraft.vr.keyVRInteract).isEnabledRaw(ControllerType.RIGHT) && !this.minecraft.vr.keyVRInteract.isDown(ControllerType.RIGHT))
+	            {
+	                if (!this.minecraft.vr.getInputAction(this.minecraft.vr.keyClimbeyGrab).isEnabledRaw(ControllerType.RIGHT) && !this.minecraft.vr.keyClimbeyGrab.isDown(ControllerType.RIGHT))
+	                {
+	                    if (this.minecraft.teleportTracker.isAiming())
+	                    {
+	                        return false;
+	                    }
+	                    else if (this.minecraft.climbTracker.isGrabbingLadder(0))
+	                    {
+	                        return false;
+	                    }
+	                    else
+	                    {
+	                        return !(this.minecraft.vrPlayer.worldScale > 15.0F);
+	                    }
+	                }
+	                else
+	                {
+	                    return false;
+	                }
+	            }
+	            else
+	            {
+	                return false;
+	            }
+	        }
+	        else
+	        {
+	            return false;
+	        }
+	    }
+	}
+
+	private void renderCrosshairAtDepth(boolean depthAlways, PoseStack poseStack)
+	{
+	    if (this.shouldRenderCrosshair())
+	    {
+	        this.minecraft.getProfiler().popPush("crosshair");
+	        GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+	        Vec3 vec3 = this.crossVec;
+	        Vec3 vec31 = vec3.subtract(this.minecraft.vrPlayer.vrdata_world_render.getController(0).getPosition());
+	        float f = (float)vec31.length();
+	        float f1 = (float)((double)(0.125F * this.minecraft.vrSettings.crosshairScale) * Math.sqrt((double)this.minecraft.vrPlayer.vrdata_world_render.worldScale));
+	        vec3 = vec3.add(vec31.normalize().scale(-0.01D));
+	        poseStack.pushPose();
+	        poseStack.setIdentity();
+	        applyVRModelView(minecraft.currentPass, poseStack);
+
+	        Vec3 vec32 = vec3.subtract(this.minecraft.getCameraEntity().position());
+	        poseStack.translate(vec32.x, vec32.y, vec32.z);
+	
+	        if (this.minecraft.hitResult != null && this.minecraft.hitResult.getType() == HitResult.Type.BLOCK)
+	        {
+	            BlockHitResult blockhitresult = (BlockHitResult)this.minecraft.hitResult;
+	
+	            if (blockhitresult.getDirection() == Direction.DOWN)
+	            {
+	            	poseStack.rotateDeg(this.minecraft.vrPlayer.vrdata_world_render.getController(0).getYaw(), 0.0F, 1.0F, 0.0F);
+	            	poseStack.rotateDeg(-90.0F, 1.0F, 0.0F, 0.0F);
+	            }
+	            else if (blockhitresult.getDirection() == Direction.EAST)
+	            {
+	            	poseStack.rotateDeg(90.0F, 0.0F, 1.0F, 0.0F);
+	            }
+	            else if (blockhitresult.getDirection() != Direction.NORTH && blockhitresult.getDirection() != Direction.SOUTH)
+	            {
+	                if (blockhitresult.getDirection() == Direction.UP)
+	                {
+	                	poseStack.rotateDeg(-this.minecraft.vrPlayer.vrdata_world_render.getController(0).getYaw(), 0.0F, 1.0F, 0.0F);
+	                	poseStack.rotateDeg(-90.0F, 1.0F, 0.0F, 0.0F);
+	                }
+	                else if (blockhitresult.getDirection() == Direction.WEST)
+	                {
+	                	poseStack.rotateDeg(90.0F, 0.0F, 1.0F, 0.0F);
+	                }
+	            }
+	        }
+	        else
+	        {
+	        	poseStack.rotateDeg(-this.minecraft.vrPlayer.vrdata_world_render.getController(0).getYaw(), 0.0F, 1.0F, 0.0F);
+	        	poseStack.rotateDeg(-this.minecraft.vrPlayer.vrdata_world_render.getController(0).getPitch(), 1.0F, 0.0F, 0.0F);
+	        }
+	
+	        if (this.minecraft.vrSettings.crosshairScalesWithDistance)
+	        {
+	            float f5 = 0.3F + 0.2F * f;
+	            f1 *= f5;
+	        }
+	
+	        this.lightTexture.turnOnLightLayer();
+	        poseStack.scale(f1, f1, f1);
+	        RenderSystem.depthMask(true);
+	        RenderSystem.enableDepthTest();
+	        //RenderSystem.disableLighting();
+	        RenderSystem.disableCull();
+	        GlStateManager.enableAlphaTest();
+	
+	        if (depthAlways)
+	        {
+	            RenderSystem.depthFunc(519);
+	        }
+	        else
+	        {
+	            RenderSystem.depthFunc(515);
+	        }
+	
+	        boolean flag = Config.isShaders();
+	        RenderSystem.enableBlend();
+	        RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.ONE_MINUS_DST_COLOR, GlStateManager.DestFactor.ZERO, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+	        int i = LevelRenderer.getLightColor(this.minecraft.level, new BlockPos(vec3));
+	        float f2 = 1.0F;
+	
+	        if (this.minecraft.hitResult == null || this.minecraft.hitResult.getType() == HitResult.Type.MISS)
+	        {
+	            f2 = 0.5F;
+	        }
+	
+	        RenderSystem.setShaderTexture(0, Screen.GUI_ICONS_LOCATION);
+	        float f3 = 0.00390625F;
+	        float f4 = 0.00390625F;
+	       
+	        BufferBuilder bufferbuilder = Tesselator.getInstance().getBuilder();
+	        
+	        RenderSystem.setShader(GameRenderer::getRendertypeCutoutShader);
+	        bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_TEX_LMAP_COLOR_NORMAL);
+	        bufferbuilder.vertex(poseStack.last().pose(), -1.0F, 1.0F, 0.0F).uv(0.0F, 15.0F * f4).uv2(i).color(f2, f2, f2, 1.0F).normal(0.0F, 0.0F, 1.0F).endVertex();
+	        bufferbuilder.vertex(poseStack.last().pose(), 1.0F, 1.0F, 0.0F).uv(15.0F * f3, 15.0F * f4).uv2(i).color(f2, f2, f2, 1.0F).normal(0.0F, 0.0F, 1.0F).endVertex();
+	        bufferbuilder.vertex(poseStack.last().pose(), 1.0F, -1.0F, 0.0F).uv(15.0F * f3, 0.0F).uv2(i).color(f2, f2, f2, 1.0F).normal(0.0F, 0.0F, 1.0F).endVertex();
+	        bufferbuilder.vertex(poseStack.last().pose(), -1.0F, -1.0F, 0.0F).uv(0.0F, 0.0F).uv2(i).color(f2, f2, f2, 1.0F).normal(0.0F, 0.0F, 1.0F).endVertex();
+	        Tesselator.getInstance().end();
+	        RenderSystem.defaultBlendFunc();
+	        RenderSystem.disableBlend();
+	        RenderSystem.enableCull();
+	        RenderSystem.depthFunc(515);
+	        poseStack.popPose();
+	    }
+	}
+
+
+	private void setupOverlayStatus(float partialTicks)
+	{
+	    this.inBlock = 0.0F;
+	    this.inwater = false;
+	    this.onfire = false;
+	
+	    if (!this.minecraft.player.isSpectator() && !this.isInMenuRoom() && this.minecraft.player.isAlive())
+	    {
+	        Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass).getPosition();
+	        Triple<Float, BlockState, BlockPos> triple = this.itemInHandRenderer.getNearOpaqueBlock(vec3, (double)this.minClipDistance);
+	
+	        if (triple != null && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderBlockOverlay, this.minecraft.player, new PoseStack(), Reflector.getFieldValue(Reflector.RenderBlockOverlayEvent_OverlayType_BLOCK), triple.getMiddle(), triple.getRight()))
+	        {
+	            this.inBlock = triple.getLeft();
+	        }
+	        else
+	        {
+	            this.inBlock = 0.0F;
+	        }
+	
+	        this.inwater = this.minecraft.player.isEyeInFluid(FluidTags.WATER) && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderWaterOverlay, this.minecraft.player, new PoseStack());
+	        this.onfire = this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA && this.minecraft.player.isOnFire() && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderFireOverlay, this.minecraft.player, new PoseStack());
+	    }
+	}
+
+	public boolean shouldOccludeGui()
+	{
+	    Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass).getPosition();
+	
+	    if (this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA)
+	    {
+	        return !this.isInMenuRoom() && this.minecraft.screen == null && !KeyboardHandler.Showing && !RadialHandler.isShowing() && this.minecraft.vrSettings.hudOcclusion && !this.itemInHandRenderer.isInsideOpaqueBlock(vec3);
+	    }
+	    else
+	    {
+	        return true;
+	    }
+	}
+
+	public boolean shouldRenderHands()
+	{
+	    if (Main.viewonly)
+	    {
+	        return false;
+	    }
+	    else if (this.minecraft.currentPass == RenderPass.THIRD)
+	    {
+	        return this.minecraft.vrSettings.displayMirrorMode == VRSettings.MirrorMode.MIXED_REALITY;
+	    }
+	    else
+	    {
+	        return this.minecraft.currentPass != RenderPass.CAMERA;
+	    }
+	}
+
+	private void renderSwingDebug(int c)
+	{
+	}
+
+	public void setupClipPlanes()
+	{
+		this.renderDistance = (float)(this.minecraft.options.getEffectiveRenderDistance() * 16);
+	    this.clipDistance = this.renderDistance + 1024.0F;
+	}
+
+	void renderMainMenuHand(int c, float partialTicks, boolean depthAlways, PoseStack poseStack)
+	{
+	    this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(mainCamera, partialTicks, false)));
+	    poseStack.pushPose();
+	    poseStack.setIdentity();
+	    RenderSystem.disableTexture();
+	    GlStateManager.disableAlphaTest();
+	    RenderSystem.enableDepthTest();
+	    applyVRModelView(minecraft.currentPass, poseStack);
+	    SetupRenderingAtController(c, poseStack);
+	    
+	    if (this.minecraft.getOverlay() == null)
+	    {
+	        minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+	        RenderSystem.setShaderTexture(0, new ResourceLocation("vivecraft:textures/white.png"));
+	    }
+	
+	    Tesselator tesselator = Tesselator.getInstance();
+	
+	    if (depthAlways && c == 0)
+	    {
+	        RenderSystem.depthFunc(519);
+	    }
+	    else
+	    {
+	        RenderSystem.depthFunc(515);
+	    }
+	
+	    Vec3i vec3i = new Vec3i(64, 64, 64);
+	    byte b0 = -1;
+	    Vec3 vec3 = new Vec3(0.0D, 0.0D, 0.0D);
+	    Vec3 vec31 = this.minecraft.vrPlayer.vrdata_world_render.getController(c).getDirection();
+	    Vec3 vec32 = this.minecraft.vrPlayer.vrdata_world_render.getController(c).getCustomVector(new Vec3(0.0D, 1.0D, 0.0D));
+	    vec32 = new Vec3(0.0D, 1.0D, 0.0D);
+	    vec31 = new Vec3(0.0D, 0.0D, -1.0D);
+	    Vec3 vec33 = new Vec3(vec3.x - vec31.x * 0.18D, vec3.y - vec31.y * 0.18D, vec3.z - vec31.z * 0.18D);
+	
+	    if (this.minecraft.level != null)
+	    {
+	        float f = (float)this.minecraft.level.getMaxLocalRawBrightness(new BlockPos(this.minecraft.vrPlayer.vrdata_world_render.hmd.getPosition()));
+	        int i = Config.isShaders() ? 8 : 4;
+	
+	        if (f < (float)i)
+	        {
+	            f = (float)i;
+	        }
+	
+	        float f1 = f / (float)this.minecraft.level.getMaxLightLevel();
+	        vec3i = new Vec3i((double)((float)vec3i.getX() * f1), (double)((float)vec3i.getY() * f1), (double)((float)vec3i.getZ() * f1));
+	    }
+	    RenderSystem.setShader(GameRenderer::getPositionColorShader);
+	    tesselator.getBuilder().begin(Mode.QUADS, DefaultVertexFormat.POSITION_COLOR_NORMAL);
+	    this.renderBox(tesselator, vec3, vec33, -0.02F, 0.02F, -0.0125F, 0.0125F, vec32, vec3i, b0, poseStack);
+	    tesselator.getBuilder().end();
+	    BufferUploader.end(tesselator.getBuilder());
+	    RenderSystem.enableTexture();
+	    poseStack.popPose();
+	    RenderSystem.depthFunc(515);
+	}
+
+	private void renderFaceOverlay(float par1, PoseStack pMatrix)
+	{
+	    boolean flag = Config.isShaders();
+	
+	    if (flag)
+	    {
+	        Shaders.beginFPOverlay();
+	    }
+	
+	    if (this.inBlock > 0.0F)
+	    {
+	        this.renderFaceInBlock();
+	        this.renderGuiLayer(par1, true, pMatrix);
+	
+	        if (KeyboardHandler.Showing)
+	        {
+	            if (this.minecraft.vrSettings.physicalKeyboard)
+	            {
+	                this.renderPhysicalKeyboard(par1, pMatrix);
+	            }
+	            else
+	            {
+	                this.render2D(par1, KeyboardHandler.Framebuffer, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room, true, pMatrix);
+	            }
+	        }
+	
+	        if (RadialHandler.isShowing())
+	        {
+	            this.render2D(par1, RadialHandler.Framebuffer, RadialHandler.Pos_room, RadialHandler.Rotation_room, true, pMatrix);
+	        }
+	
+	        if (this.inBlock >= 1.0F)
+	        {
+	            this.renderVRHands(par1, true, true, true, true, pMatrix);
+	        }
+	    }
+	
+	    if (flag)
+	    {
+	        Shaders.endFPOverlay();
+	    }
+	}
+
+	private void renderFaceInBlock()
+	{
+	    Tesselator tesselator = Tesselator.getInstance();
+	    BufferBuilder bufferbuilder = tesselator.getBuilder();
+	    GlStateManager.color4f(0.0F, 0.0F, 0.0F, this.minecraft.gameRenderer.inBlock);
+	    Matrix4f mat = new Matrix4f();
+	    mat = mat.orthographic(1, 1, 0, 1);
+	    GlStateManager._disableDepthTest();
+	    GlStateManager._disableTexture();
+	    GlStateManager._enableBlend();
+	    GlStateManager._disableCull();
+	    bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION);
+	    bufferbuilder.vertex(mat, -1.0F, -1.0F, 0.0F).endVertex();
+	    bufferbuilder.vertex(mat, 2.0F, -1.0F, 0.0F).endVertex();
+	    bufferbuilder.vertex(mat, 2.0F, 2.0F, 0.0F).endVertex();
+	    bufferbuilder.vertex(mat, -1.0F, 2.0F, 0.0F).endVertex();
+	    tesselator.end();
+	    GlStateManager._enableTexture();
+	    GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+	}
+
+	private void renderFireInFirstPerson()
+	{
+	    PoseStack posestack = new PoseStack();
+	    this.applyVRModelView(this.minecraft.currentPass, posestack);
+	    this.applystereo(this.minecraft.currentPass, posestack);
+	    BufferBuilder bufferbuilder = Tesselator.getInstance().getBuilder();
+	    RenderSystem.depthFunc(519);
+	
+	    if (this.minecraft.currentPass == RenderPass.THIRD || this.minecraft.currentPass == RenderPass.CAMERA)
+	    {
+	        GlStateManager._depthFunc(515);
+	    }
+	
+	    RenderSystem.enableBlend();
+	    RenderSystem.defaultBlendFunc();
+	    TextureAtlasSprite textureatlassprite = ModelBakery.FIRE_1.sprite();
+	    RenderSystem.enableDepthTest();
+	
+	    if (SmartAnimations.isActive())
+	    {
+	        SmartAnimations.spriteRendered(textureatlassprite);
+	    }
+
+	    RenderSystem.setShader(GameRenderer::getPositionColorTexShader);
+	    RenderSystem.setShaderTexture(0, textureatlassprite.atlas().location());
+	    float f = textureatlassprite.getU0();
+	    float f1 = textureatlassprite.getU1();
+	    float f2 = (f + f1) / 2.0F;
+	    float f3 = textureatlassprite.getV0();
+	    float f4 = textureatlassprite.getV1();
+	    float f5 = (f3 + f4) / 2.0F;
+	    float f6 = textureatlassprite.uvShrinkRatio();
+	    float f7 = Mth.lerp(f6, f, f2);
+	    float f8 = Mth.lerp(f6, f1, f2);
+	    float f9 = Mth.lerp(f6, f3, f5);
+	    float f10 = Mth.lerp(f6, f4, f5);
+	    float f11 = 1.0F;
+	    float f12 = 0.3F;
+	    float f13 = (float)(this.minecraft.vrPlayer.vrdata_world_render.getHeadPivot().y - this.minecraft.gameRenderer.rveY);
+	
+	    for (int i = 0; i < 4; ++i)
+	    {
+	        posestack.pushPose();
+	        posestack.mulPose(Vector3f.YP.rotationDegrees((float)i * 90.0F - this.minecraft.vrPlayer.vrdata_world_render.getBodyYaw()));
+	        posestack.translate(0.0D, (double)(-f13), 0.0D);
+	        Matrix4f matrix4f = posestack.last().pose();
+	        bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_COLOR_TEX);
+	        bufferbuilder.vertex(matrix4f, -f12, 0.0F, -f12).color(1.0F, 1.0F, 1.0F, 0.9F).uv(f8, f10).endVertex();
+	        bufferbuilder.vertex(matrix4f, f12, 0.0F, -f12).color(1.0F, 1.0F, 1.0F, 0.9F).uv(f7, f10).endVertex();
+	        bufferbuilder.vertex(matrix4f, f12, f13, -f12).color(1.0F, 1.0F, 1.0F, 0.9F).uv(f7, f9).endVertex();
+	        bufferbuilder.vertex(matrix4f, -f12, f13, -f12).color(1.0F, 1.0F, 1.0F, 0.9F).uv(f8, f9).endVertex();
+	        bufferbuilder.end();
+	        BufferUploader.end(bufferbuilder);
+	        posestack.popPose();
+	    }
+	
+	    RenderSystem.depthFunc(515);
+	    RenderSystem.disableBlend();
+	}
+
+	private void renderVRSelfEffects(float par1)
+	{
+	    if (this.onfire && this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA)
+	    {
+	
+	        if (this.onfire)
+	        {
+	            this.renderFireInFirstPerson();
+	        }
+	
+	        this.renderItemActivationAnimation(0, 0, par1);
+	    }
+	}
+
+	private void renderVrShadow(float par1, boolean depthAlways, PoseStack poseStack)
+	{
+	    if (this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA)
+	    {
+	        if (this.minecraft.player.isAlive())
+	        {
+	            if (!(this.minecraft.player.getRoomYOffsetFromPose() < 0.0D))
+	            {
+	                if (this.minecraft.player.getVehicle() == null)
+	                {
+	                    AABB aabb = this.minecraft.player.getBoundingBox();
+	
+	                    if (this.minecraft.vrSettings.vrShowBlueCircleBuddy && aabb != null)
+	                    {
+
+	                    	poseStack.pushPose();
+		                    poseStack.setIdentity();
+		                        GlStateManager._disableCull();
+		                        this.applyVRModelView(minecraft.currentPass, poseStack);
+		                        Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass).getPosition();
+		                        LocalPlayer localplayer = this.minecraft.player;
+		                        Vec3 vec31 = new Vec3(this.rvelastX + (this.rveX - this.rvelastX) * (double)par1, this.rvelastY + (this.rveY - this.rvelastY) * (double)par1, this.rvelastZ + (this.rveZ - this.rvelastZ) * (double)par1);
+		                        Vec3 vec32 = vec31.subtract(vec3).add(0.0D, 0.005D, 0.0D);
+		                        this.setupPolyRendering(true);
+		                        RenderSystem.enableDepthTest();
+		
+		                        if (depthAlways)
+		                        {
+		                            RenderSystem.depthFunc(519);
+		                        }
+		                        else
+		                        {
+		                        	GlStateManager._depthFunc(515);
+		                        }
+
+		                        RenderSystem.setShader(GameRenderer::getPositionColorShader);
+		            	        minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+		                        RenderSystem.setShaderTexture(0, new ResourceLocation("vivecraft:textures/white.png"));
+		                        this.renderFlatQuad(vec32, (float)(aabb.maxX - aabb.minX), (float)(aabb.maxZ - aabb.minZ), 0.0F, 0, 0, 0, 64, poseStack);
+		                        RenderSystem.depthFunc(515);             
+		                        this.setupPolyRendering(false);
+		                        poseStack.popPose();
+	                        GlStateManager._enableCull();
+	                    }
+	                }
+	            }
+	        }
+	    }
+	}
+
+	void DrawScopeFB(PoseStack matrixStackIn, int i)
+	{
+	    if (this.minecraft.currentPass != RenderPass.SCOPEL && this.minecraft.currentPass != RenderPass.SCOPER)
+	    {
+	        this.lightTexture.turnOffLightLayer();
+            matrixStackIn.pushPose();
+	        RenderSystem.enableDepthTest();
+            RenderSystem.enableTexture();
+
+	        if (i == 0)
+	        {
+	            this.minecraft.vrRenderer.telescopeFramebufferR.bindRead();
+                RenderSystem.setShaderTexture(0, this.minecraft.vrRenderer.telescopeFramebufferR.getColorTextureId());
+	        }
+	        else
+	        {
+	            this.minecraft.vrRenderer.telescopeFramebufferL.bindRead();
+                RenderSystem.setShaderTexture(0, this.minecraft.vrRenderer.telescopeFramebufferL.getColorTextureId());
+	        }
+
+            float scale = 0.0785F;
+            //actual framebuffer
+	        float f = TelescopeTracker.viewPercent(i);
+	        this.drawSizedQuad(720.0F, 720.0F, scale, new float[]{f, f, f, 1}, matrixStackIn.last().pose());
+
+	        RenderSystem.setShaderTexture(0, Gui.SPYGLASS_SCOPE_LOCATION);
+	        RenderSystem.enableBlend();
+            matrixStackIn.translate(0.0D, 0.0D, 0.00001D);
+	        int light = LevelRenderer.getLightColor(this.minecraft.level, new BlockPos(minecraft.vrPlayer.vrdata_world_render.getController(i).getPosition()));
+	        this.drawSizedQuadWithLightmap(720.0F, 720.0F, scale, light, matrixStackIn.last().pose());
+
+            matrixStackIn.popPose();
+	        this.lightTexture.turnOnLightLayer();
+	    }
+	}
+
+	void drawEyeStencil(boolean shaders)
+	{
+	    if (this.minecraft.currentPass != RenderPass.SCOPEL && this.minecraft.currentPass != RenderPass.SCOPER)
+	    {
+	        if ((this.minecraft.currentPass == RenderPass.LEFT || this.minecraft.currentPass == RenderPass.RIGHT) && this.minecraft.vrSettings.vrUseStencil)
+	        {
+	            net.optifine.shaders.Program program = Shaders.activeProgram;
+	
+	            if (shaders && Shaders.dfb != null)
+	            {
+	                Shaders.dfb.bindFramebuffer();
+	                Shaders.useProgram(Shaders.ProgramNone);
+	
+	                for (int i = 0; i < Shaders.usedDepthBuffers; ++i)
+	                {
+	                    GlStateManager._bindTexture(Shaders.dfb.depthTextures.get(i));
+	                    this.minecraft.vrRenderer.doStencil(false);
+	                }
+	
+	                Shaders.useProgram(program);
+	            }
+	            else
+	            {
+	                this.minecraft.vrRenderer.doStencil(false);
+	            }
+	        }
+	        else
+	        {
+	            GL11.glDisable(GL11.GL_STENCIL_TEST);
+	        }
+	    }
+	    else
+	    {
+            //this.minecraft.vrRenderer.doStencil(true);
+	    }
+	}
+
+	public void applyVRModelView(RenderPass currentPass, PoseStack matrix)
+	{
+	    matrix.last().pose().multiply(this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getMatrix().transposed().toMCMatrix());
+	}
+
+	public void applystereo(RenderPass currentPass, PoseStack matrix)
+	{
+	    if (currentPass == RenderPass.LEFT || currentPass == RenderPass.RIGHT)
+	    {
+	        Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getPosition().subtract(this.minecraft.vrPlayer.vrdata_world_render.getEye(RenderPass.CENTER).getPosition());
+	        matrix.translate((double)((float)(-vec3.x)), (double)((float)(-vec3.y)), (double)((float)(-vec3.z)));
+	    }
+	}
+
+	public void removeStereo(RenderPass currentPass, PoseStack matrix)
+	{
+	    if (currentPass == RenderPass.LEFT || currentPass == RenderPass.RIGHT)
+	    {
+	        Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getPosition().subtract(this.minecraft.vrPlayer.vrdata_world_render.getEye(RenderPass.CENTER).getPosition());
+	        matrix.translate((double)((float)vec3.x), (double)((float)vec3.y), (double)((float)vec3.z));
+	    }
+	}
+
+	private void setupPolyRendering(boolean enable)
+	{
+	    boolean flag = Config.isShaders();
+	
+	    if (enable)
+	    {
+	        this.polyblendsrca = GlStateManager.BLEND.srcAlpha;
+	        this.polyblenddsta = GlStateManager.BLEND.dstAlpha;
+	        this.polyblendsrcrgb = GlStateManager.BLEND.srcRgb;
+	        this.polyblenddstrgb = GlStateManager.BLEND.dstRgb;
+	        this.polyblend = GL11.glIsEnabled(GL11.GL_BLEND);
+	        this.polytex = GL11.glIsEnabled(GL11.GL_TEXTURE_2D);
+	        this.polylight = GL11.glIsEnabled(GL11.GL_LIGHTING);
+	        this.polycull = GL11.glIsEnabled(GL11.GL_CULL_FACE);
+	        GlStateManager._enableBlend();
+	        RenderSystem.defaultBlendFunc();
+	        GlStateManager._disableTexture();
+	        //GlStateManager._disableLighting();
+	        GlStateManager._disableCull();
+	
+	        if (flag)
+	        {
+	            this.prog = Shaders.activeProgram;
+	            Shaders.useProgram(Shaders.ProgramTextured);
+	        }
+	    }
+	    else
+	    {
+	        RenderSystem.blendFuncSeparate(this.polyblendsrcrgb, this.polyblenddstrgb, this.polyblendsrca, this.polyblenddsta);
+	
+	        if (!this.polyblend)
+	        {
+	            GlStateManager._disableBlend();
+	        }
+	
+	        if (this.polytex)
+	        {
+	            GlStateManager._enableTexture();
+	        }
+	
+	        if (this.polylight)
+	        {
+	            //GlStateManager._enableLighting();
+	        }
+	
+	        if (this.polycull)
+	        {
+	            GlStateManager._enableCull();
+	        }
+	
+	        if (flag && this.polytex)
+	        {
+	            Shaders.useProgram(this.prog);
+	        }
+	    }
+	}
+
+	public void setupRVE()
+	{
+	    if (this.cached)
+	    {
+	        VRData.VRDevicePose vrdata$vrdevicepose = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass);
+	        Vec3 vec3 = vrdata$vrdevicepose.getPosition();
+	        LivingEntity livingentity = (LivingEntity)this.minecraft.getCameraEntity();
+	        livingentity.setPosRaw(vec3.x, vec3.y, vec3.z);
+	        livingentity.xOld = vec3.x;
+	        livingentity.yOld = vec3.y;
+	        livingentity.zOld = vec3.z;
+	        livingentity.xo = vec3.x;
+	        livingentity.yo = vec3.y;
+	        livingentity.zo = vec3.z;
+	        livingentity.setXRot(-vrdata$vrdevicepose.getPitch());
+	        livingentity.xRotO = livingentity.getXRot();
+	        livingentity.setYRot(vrdata$vrdevicepose.getYaw());
+	        livingentity.yHeadRot = livingentity.getYRot();
+	        livingentity.yHeadRotO = livingentity.getYRot();
+	
+	        MCReflection.Entity_eyeHeight.set(livingentity, 0);
+	    }
+	}
+
+	public void cacheRVEPos(LivingEntity e)
+	{
+	    if (this.minecraft.getCameraEntity() != null)
+	    {
+	        if (!this.cached)
+	        {
+	            this.rveX = e.getX();
+	            this.rveY = e.getY();
+	            this.rveZ = e.getZ();
+	            this.rvelastX = e.xOld;
+	            this.rvelastY = e.yOld;
+	            this.rvelastZ = e.zOld;
+	            this.rveprevX = e.xo;
+	            this.rveprevY = e.yo;
+	            this.rveprevZ = e.zo;
+	            this.rveyaw = e.yHeadRot;
+	            this.rvepitch = e.getXRot();
+	            this.rvelastyaw = e.yHeadRotO;
+	            this.rvelastpitch = e.xRotO;
+	            this.rveHeight = e.getEyeHeight();
+	            this.cached = true;
+	        }
+	    }
+	}
+
+	public void restoreRVEPos(LivingEntity e)
+	{
+	    if (e != null)
+	    {
+	        e.setPosRaw(this.rveX, this.rveY, this.rveZ);
+	        e.xOld = this.rvelastX;
+	        e.yOld = this.rvelastY;
+	        e.zOld = this.rvelastZ;
+	        e.xo = this.rveprevX;
+	        e.yo = this.rveprevY;
+	        e.zo = this.rveprevZ;
+	        e.setYRot(this.rveyaw);
+	        e.setXRot(this.rvepitch);
+	        e.yRotO = this.rvelastyaw;
+	        e.xRotO = this.rvelastpitch;
+	        e.yHeadRot = this.rveyaw;
+	        e.yHeadRotO = this.rvelastyaw;
+	        MCReflection.Entity_eyeHeight.set(e, this.rveHeight);
+	        this.cached = false;
+	    }
+	}
+
+	public boolean isInMenuRoom()
+	{
+	    return this.minecraft.level == null || this.minecraft.screen instanceof WinScreen || this.minecraft.integratedServerLaunchInProgress || this.minecraft.getOverlay() != null;
+	}
+
+	void renderVRHands(float partialTicks, boolean renderright, boolean renderleft, boolean menuhandright, boolean menuhandleft, PoseStack poseStack)
+	{
+	    this.minecraft.getProfiler().push("hands");
+	
+	    if (renderright)
+	    {
+	        this.minecraft.getItemRenderer();
+	        ItemRenderer.ismainhand = true;
+	
+	        if (menuhandright)
+	        {
+	            this.renderMainMenuHand(0, partialTicks, false, poseStack);
+	        }
+	        else
+	        {
+	            this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(this.mainCamera, partialTicks, true)));
+	            PoseStack posestack = new PoseStack();
+	            posestack.last().pose().setIdentity();
+	            this.applyVRModelView(this.minecraft.currentPass, posestack);
+	            this.renderVRHand_Main(posestack, partialTicks);
+	            this.renderSwingDebug(0);
+	        }
+	
+	        this.minecraft.getItemRenderer();
+	        ItemRenderer.ismainhand = false;
+	    }
+	
+	    if (renderleft)
+	    {
+	        if (menuhandleft)
+	        {
+	            this.renderMainMenuHand(1, partialTicks, false, poseStack);
+	        }
+	        else
+	        {
+	            this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(this.mainCamera, partialTicks, true)));
+	            PoseStack posestack1 = new PoseStack();
+	            posestack1.last().pose().setIdentity();
+	            this.applyVRModelView(this.minecraft.currentPass, posestack1);
+	            this.renderVRHand_Offhand(partialTicks, true, posestack1);
+	            this.renderSwingDebug(1);
+	        }
+	    }
+	
+	    this.minecraft.getProfiler().pop();
+	}
+
+	private void renderVRHand_Main(PoseStack matrix, float partialTicks)
+	{
+	    matrix.pushPose();
+	    this.SetupRenderingAtController(0, matrix);
+	    ItemStack itemstack = this.minecraft.player.getMainHandItem();
+	    ItemStack itemstack1 = null; //this.minecraft.physicalGuiManager.getHeldItemOverride();
+	
+	    if (itemstack1 != null)
+	    {
+	        itemstack = itemstack1;
+	    }
+	
+	    if (this.minecraft.climbTracker.isClimbeyClimb() && itemstack.getItem() != Items.SHEARS)
+	    {
+	        itemstack = itemstack1 == null ? this.minecraft.player.getOffhandItem() : itemstack1;
+	    }
+	
+	    if (BowTracker.isHoldingBow(this.minecraft.player, InteractionHand.MAIN_HAND))
+	    {
+	        int i = 0;
+	
+	        if (this.minecraft.vrSettings.reverseShootingEye)
+	        {
+	            i = 1;
+	        }
+	
+	        ItemStack itemstack2 = this.minecraft.player.getProjectile(this.minecraft.player.getMainHandItem());
+	
+	        if (itemstack2 != ItemStack.EMPTY && !this.minecraft.bowTracker.isNotched())
+	        {
+	            itemstack = itemstack2;
+	        }
+	        else
+	        {
+	            itemstack = ItemStack.EMPTY;
+	        }
+	    }
+	    else if (BowTracker.isHoldingBow(this.minecraft.player, InteractionHand.OFF_HAND) && this.minecraft.bowTracker.isNotched())
+	    {
+	        int j = 0;
+	
+	        if (this.minecraft.vrSettings.reverseShootingEye)
+	        {
+	            j = 1;
+	        }
+	
+	        itemstack = ItemStack.EMPTY;
+	    }
+	
+	    boolean flag = false;
+	
+	    if (Config.isShaders())
+	    {
+	        Shaders.beginHand(matrix, flag);
+	    }
+	    else
+	    {
+	        matrix.pushPose();
+	    }
+	
+	    this.lightTexture.turnOnLightLayer();
+	    MultiBufferSource.BufferSource multibuffersource$buffersource = this.renderBuffers.bufferSource();
+	    this.itemInHandRenderer.renderArmWithItem(this.minecraft.player, partialTicks, 0.0F, InteractionHand.MAIN_HAND, this.minecraft.player.getAttackAnim(partialTicks), itemstack, 0.0F, matrix, multibuffersource$buffersource, this.minecraft.getEntityRenderDispatcher().getPackedLightCoords(this.minecraft.player, partialTicks));
+	    multibuffersource$buffersource.endBatch();
+	    this.lightTexture.turnOffLightLayer();
+	
+	    if (Config.isShaders())
+	    {
+	        Shaders.endHand(matrix);
+	    }
+	    else
+	    {
+	        matrix.popPose();
+	    }
+	
+	    matrix.popPose();
+	}
+
+	private void renderVRHand_Offhand(float partialTicks, boolean renderTeleport, PoseStack matrix)
+	{
+	    boolean flag = Config.isShaders();
+	    boolean flag1 = false;
+	
+	    if (flag)
+	    {
+	        flag1 = Shaders.isShadowPass;
+	    }
+	
+	    matrix.pushPose();
+	    this.SetupRenderingAtController(1, matrix);
+	    ItemStack itemstack = this.minecraft.player.getOffhandItem();
+	    ItemStack itemstack1 = null;//this.minecraft.physicalGuiManager.getOffhandOverride();
+	
+	    if (itemstack1 != null)
+	    {
+	        itemstack = itemstack1;
+	    }
+	
+	    if (this.minecraft.climbTracker.isClimbeyClimb() && (itemstack == null || itemstack.getItem() != Items.SHEARS))
+	    {
+	        itemstack = this.minecraft.player.getMainHandItem();
+	    }
+	
+	    if (BowTracker.isHoldingBow(this.minecraft.player, InteractionHand.MAIN_HAND))
+	    {
+	        int i = 1;
+	
+	        if (this.minecraft.vrSettings.reverseShootingEye)
+	        {
+	            i = 0;
+	        }
+	
+	        itemstack = this.minecraft.player.getMainHandItem();
+	    }
+	
+	    boolean flag2 = false;
+	
+	    if (Config.isShaders())
+	    {
+	        Shaders.beginHand(matrix, flag2);
+	    }
+	    else
+	    {
+	        matrix.pushPose();
+	    }
+	
+	    this.lightTexture.turnOnLightLayer();
+	    MultiBufferSource.BufferSource multibuffersource$buffersource = this.renderBuffers.bufferSource();
+	    this.itemInHandRenderer.renderArmWithItem(this.minecraft.player, partialTicks, 0.0F, InteractionHand.OFF_HAND, this.minecraft.player.getAttackAnim(partialTicks), itemstack, 0.0F, matrix, multibuffersource$buffersource, this.minecraft.getEntityRenderDispatcher().getPackedLightCoords(this.minecraft.player, partialTicks));
+	    multibuffersource$buffersource.endBatch();
+	    this.lightTexture.turnOffLightLayer();
+	
+	    if (Config.isShaders())
+	    {
+	        Shaders.endHand(matrix);
+	    }
+	    else
+	    {
+	        matrix.popPose();
+	    }
+	
+	    matrix.popPose();
+	
+	    if (renderTeleport)
+	    {
+	    	matrix.pushPose();
+	        matrix.setIdentity();
+	        this.applyVRModelView(minecraft.currentPass, matrix);
+	        net.optifine.shaders.Program program = Shaders.activeProgram;
+	
+	        if (Config.isShaders())
+	        {
+	            Shaders.useProgram(Shaders.ProgramTexturedLit);
+	        }
+	
+	        GlStateManager.enableAlphaTest();
+	        RenderSystem.enableBlend();
+	        RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+	        RenderSystem.disableTexture();
+	
+	        if (NetworkHelper.isLimitedSurvivalTeleport() && !this.minecraft.vrPlayer.getFreeMove() && this.minecraft.gameMode.hasMissTime() && this.minecraft.teleportTracker.vrMovementStyle.arcAiming && !this.minecraft.bowTracker.isActive(this.minecraft.player))
+	        {
+	        	matrix.pushPose();
+	            this.SetupRenderingAtController(1, matrix);
+	            Vec3 vec3 = new Vec3(0.0D, 0.005D, 0.03D);
+	            float f1 = 0.03F;
+	            float f;
+	
+	            if (this.minecraft.teleportTracker.isAiming())
+	            {
+	                f = 2.0F * (float)((double)this.minecraft.teleportTracker.getTeleportEnergy() - 4.0D * this.minecraft.teleportTracker.movementTeleportDistance) / 100.0F * f1;
+	            }
+	            else
+	            {
+	                f = 2.0F * this.minecraft.teleportTracker.getTeleportEnergy() / 100.0F * f1;
+	            }
+	
+	            if (f < 0.0F)
+	            {
+	                f = 0.0F;
+	            }
+	    	    RenderSystem.setShader(GameRenderer::getPositionColorShader);
+		        minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+	            RenderSystem.setShaderTexture(0, new ResourceLocation("vivecraft:textures/white.png"));
+	            this.renderFlatQuad(vec3.add(0.0D, 0.05001D, 0.0D), f, f, 0.0F, this.tpLimitedColor.getX(), this.tpLimitedColor.getY(), this.tpLimitedColor.getZ(), 128, matrix);
+	            this.renderFlatQuad(vec3.add(0.0D, 0.05D, 0.0D), f1, f1, 0.0F, this.tpLimitedColor.getX(), this.tpLimitedColor.getY(), this.tpLimitedColor.getZ(), 50, matrix);
+	            matrix.popPose();
+	        }
+	
+	        if (this.minecraft.teleportTracker.isAiming())
+	        {
+	            RenderSystem.enableDepthTest();
+	
+	            if (this.minecraft.teleportTracker.vrMovementStyle.arcAiming)
+	            {
+	                this.renderTeleportArc(this.minecraft.vrPlayer, matrix);
+	            }
+	
+	        }
+	
+	        RenderSystem.enableTexture();
+	        RenderSystem.defaultBlendFunc();
+	
+	        if (Config.isShaders())
+	        {
+	            Shaders.useProgram(program);
+	        }
+	
+	        matrix.popPose();
+	    }
+	}
+
+
+	void render2D(float par1, RenderTarget framebuffer, Vec3 pos, org.vivecraft.utils.math.Matrix4f rot, boolean depthAlways, PoseStack poseStack)
+	{
+	    if (!this.minecraft.bowTracker.isDrawing)
+	    {
+	        boolean flag = this.isInMenuRoom();
+	        this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(this.mainCamera, par1, true)));
+	        poseStack.pushPose();
+	        poseStack.setIdentity();
+	        this.applyVRModelView(minecraft.currentPass, poseStack);
+		    Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(minecraft.currentPass).getPosition();
+		    Vec3 vec31 = new Vec3(0.0D, 0.0D, 0.0D);
+		    float f = GuiHandler.guiScale;
+		    VRPlayer vrplayer = this.minecraft.vrPlayer;
+		    Vec3 guipos = VRPlayer.room_to_world_pos(pos, this.minecraft.vrPlayer.vrdata_world_render);
+		    org.vivecraft.utils.math.Matrix4f matrix4f = org.vivecraft.utils.math.Matrix4f.rotationY(this.minecraft.vrPlayer.vrdata_world_render.rotation_radians);
+		    org.vivecraft.utils.math.Matrix4f guirot = org.vivecraft.utils.math.Matrix4f.multiply(matrix4f, rot);		    
+		    
+		    poseStack.translate((float)(guipos.x - vec3.x), (float)(guipos.y - vec3.y), (float)(guipos.z - vec3.z));
+		    poseStack.mulPoseMatrix(guirot.toMCMatrix());
+		    poseStack.translate((float)vec31.x, (float)vec31.y, (float)vec31.z);
+		    float f1 = f * this.minecraft.vrPlayer.vrdata_world_render.worldScale;
+		    poseStack.scale(f1, f1, f1);
+		    
+	        framebuffer.bindRead();
+	        GlStateManager._disableCull();
+	        GlStateManager._enableTexture();
+    		RenderSystem.setShader(GameRenderer::getPositionTexShader);
+            RenderSystem.setShaderTexture(0, framebuffer.getColorTextureId());
+//	        RenderSystem.texParameter(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, 33071);
+//	        RenderSystem.texParameter(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, 33071);
+//	        RenderSystem.texParameter(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
+//	        RenderSystem.texParameter(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+//	        RenderSystem.texParameter(GL11.GL_TEXTURE_2D, 34046, 16);
+	        float[] color = new float[] {1,1,1,1};
+	        if (!flag)
+	        {
+	            if (this.minecraft.screen == null)
+	            {
+	            	color[3] = this.minecraft.vrSettings.hudOpacity;
+	            }
+	
+	            if (this.minecraft.player != null && this.minecraft.player.isShiftKeyDown())
+	            {
+	            	color[3] *= 0.75F;
+	            }
+	
+	            GlStateManager._enableBlend();
+	            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE_MINUS_DST_ALPHA, GlStateManager.DestFactor.ONE);
+	        }
+	        else
+	        {
+	            GlStateManager._disableBlend();
+	        }
+	
+	        if (depthAlways)
+	        {
+	            GlStateManager._depthFunc(519);
+	        }
+	        else
+	        {
+	            GlStateManager._depthFunc(515);
+	        }
+	
+	        GlStateManager.alphaFunc(516, 0.003921569F);
+	        GlStateManager._depthMask(true);
+	        GlStateManager._enableDepthTest();
+	
+	        if (flag)
+	        {
+	            GlStateManager.disableAlphaTest();
+	        }
+	        else
+	        {
+	            GlStateManager.enableAlphaTest();
+	        }
+	
+	        //GlStateManager._disableLighting();
+	
+	        if (this.minecraft.level != null)
+	        {
+	            if (this.itemInHandRenderer.isInsideOpaqueBlock(vec3))
+	            {
+	                vec3 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getPosition();
+	            }
+	
+	            int i = Config.isShaders() ? 8 : 4;
+	            int j = Utils.getCombinedLightWithMin(this.minecraft.level, new BlockPos(vec3), i);
+	            this.drawSizedQuadWithLightmap((float)this.minecraft.getWindow().getGuiScaledWidth(), (float)this.minecraft.getWindow().getGuiScaledHeight(), 1.5F, j, color, poseStack.last().pose());
+	        }
+	        else
+	        {
+	            this.drawSizedQuad((float)this.minecraft.getWindow().getGuiScaledWidth(), (float)this.minecraft.getWindow().getGuiScaledHeight(), 1.5F, color, poseStack.last().pose());
+	        }
+	
+	        //GlStateManager._blendColor(1.0F, 1.0F, 1.0F, 1.0F);
+	        RenderSystem.defaultBlendFunc();
+	        GlStateManager._depthFunc(515);
+	        GlStateManager._enableCull();
+
+	        poseStack.popPose();
+	    }
+	}
+
+	void renderPhysicalKeyboard(float partialTicks, PoseStack poseStack)
+	{
+	    if (!this.minecraft.bowTracker.isDrawing)
+	    {
+	        this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(this.mainCamera, partialTicks, true)));
+	        poseStack.pushPose();
+	        poseStack.setIdentity();
+	        //RenderSystem.enableRescaleNormal();
+	        //Lighting.setupFor3DItems();
+	        
+		    this.minecraft.getProfiler().push("applyPhysicalKeyboardModelView");
+		    Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(minecraft.currentPass).getPosition();
+		    VRPlayer vrplayer = this.minecraft.vrPlayer;
+		    Vec3 guipos = VRPlayer.room_to_world_pos(KeyboardHandler.Pos_room, this.minecraft.vrPlayer.vrdata_world_render);
+		    org.vivecraft.utils.math.Matrix4f matrix4f = org.vivecraft.utils.math.Matrix4f.rotationY(this.minecraft.vrPlayer.vrdata_world_render.rotation_radians);
+		    org.vivecraft.utils.math.Matrix4f guirot = org.vivecraft.utils.math.Matrix4f.multiply(matrix4f, KeyboardHandler.Rotation_room);
+		    poseStack.mulPoseMatrix(this.minecraft.vrPlayer.vrdata_world_render.getEye(minecraft.currentPass).getMatrix().transposed().toMCMatrix());
+		    poseStack.translate((float)(guipos.x - vec3.x), (float)(guipos.y - vec3.y), (float)(guipos.z - vec3.z));
+		    //GlStateManager._multMatrix(guirot.transposed().toFloatBuffer());
+		    poseStack.mulPoseMatrix(guirot.toMCMatrix());
+		    float f = this.minecraft.vrPlayer.vrdata_world_render.worldScale;
+		    poseStack.scale(f, f, f);
+		    this.minecraft.getProfiler().pop();
+	        
+	        KeyboardHandler.physicalKeyboard.render(poseStack);
+	        //Lighting.turnOff();
+	        //RenderSystem.disableRescaleNormal();
+	        poseStack.popPose();
+            RenderSystem.applyModelViewMatrix();
+	    }
+	}
+
+	private void renderGuiLayer(float par1, boolean depthAlways, PoseStack pMatrix)
+	{
+	    if (!this.minecraft.bowTracker.isDrawing)
+	    {
+	        if (this.minecraft.screen != null || !this.minecraft.options.hideGui)
+	        {
+	            if (!RadialHandler.isShowing())
+	            {
+	                boolean flag = this.isInMenuRoom();
+
+	                PoseStack poseStack = RenderSystem.getModelViewStack();
+                    poseStack.pushPose();
+                    poseStack.setIdentity();
+                    RenderSystem.applyModelViewMatrix();
+
+	                if (flag)
+	                {
+	                	pMatrix.pushPose();
+		                	Vec3 eye = minecraft.vrPlayer.vrdata_world_render.getEye(minecraft.currentPass).getPosition();
+		                	pMatrix.translate((minecraft.vrPlayer.vrdata_world_render.origin.x - eye.x), (minecraft.vrPlayer.vrdata_world_render.origin.y - eye.y), (minecraft.vrPlayer.vrdata_world_render.origin.z - eye.z));
+	
+		                	if (this.minecraft.menuWorldRenderer != null && this.minecraft.menuWorldRenderer.isReady())
+		                	{
+		                		try
+		                		{
+		                			this.renderTechjarsAwesomeMainMenuRoom();
+		                		}
+		                		catch (Exception exception)
+		                		{
+		                			System.out.println("Error rendering main menu world, unloading to prevent more errors");
+		                			exception.printStackTrace();
+		                			this.minecraft.menuWorldRenderer.destroy();
+		                		}
+		                	}
+		                	else
+		                	{
+		                		this.renderJrbuddasAwesomeMainMenuRoomNew(pMatrix);
+		                	}
+	                	pMatrix.popPose();
+	                }
+	
+	                pMatrix.pushPose();
+		                Vec3 vec31 = GuiHandler.applyGUIModelView(this.minecraft.currentPass, pMatrix);
+		                GuiHandler.guiFramebuffer.bindRead();
+		                RenderSystem.disableCull();
+		                RenderSystem.enableTexture();
+		                RenderSystem.setShaderTexture(0, GuiHandler.guiFramebuffer.getColorTextureId());
+//		                GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, 33071.0F);
+//		                GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, 33071.0F);
+//		                GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
+//		                GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+//		                GL11.glTexParameterf(GL11.GL_TEXTURE_2D, 34046, 16.0F);
+		                float[] color = new float[] {1.0F, 1.0F, 1.0F, 1.0F};
+		                if (!flag)
+		                {
+		                    if (this.minecraft.screen == null)
+		                    {
+		                    	color[3] = this.minecraft.vrSettings.hudOpacity;
+		                    }
+		
+		                    if (this.minecraft.player != null && this.minecraft.player.isShiftKeyDown())
+		                    {
+		                    	color[3] *= 0.75F;
+		                    }
+		
+		                    RenderSystem.enableBlend();
+		                    RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE_MINUS_DST_ALPHA, GlStateManager.DestFactor.ONE);
+		                }
+		                else
+		                {
+		                    RenderSystem.disableBlend();
+		                }
+		
+		                if (depthAlways)
+		                {
+		                    RenderSystem.depthFunc(519);
+		                }
+		                else
+		                {
+		                    RenderSystem.depthFunc(515);
+		                }
+		
+		                GlStateManager.alphaFunc(516, 0.003921569F);
+		                RenderSystem.depthMask(true);
+		                RenderSystem.enableDepthTest();
+		
+		                if (flag)
+		                {	                	
+		                    GlStateManager.disableAlphaTest();
+		                }
+		                else
+		                {
+		                    GlStateManager.enableAlphaTest();
+		                }
+		
+		                //RenderSystem.disableLighting();
+		
+		                if (this.minecraft.level != null)
+		                {
+		                    if (this.itemInHandRenderer.isInsideOpaqueBlock(vec31))
+		                    {
+		                        vec31 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getPosition();
+		                    }
+		
+		                    int i = Config.isShaders() ? 8 : 4;
+		                    int j = Utils.getCombinedLightWithMin(this.minecraft.level, new BlockPos(vec31), i);
+		                    this.drawSizedQuadWithLightmap((float)this.minecraft.getWindow().getGuiScaledWidth(), (float)this.minecraft.getWindow().getGuiScaledHeight(), 1.5F, j, color, pMatrix.last().pose());
+		                }
+		                else
+		                {
+		                    this.drawSizedQuad((float)this.minecraft.getWindow().getGuiScaledWidth(), (float)this.minecraft.getWindow().getGuiScaledHeight(), 1.5F, color, pMatrix.last().pose());
+		                }
+		
+		                //RenderSystem.blendColor(1.0F, 1.0F, 1.0F, 1.0F);
+		                RenderSystem.depthFunc(515);
+		                RenderSystem.enableDepthTest();
+		                //RenderSystem.defaultAlphaFunc();
+		                RenderSystem.defaultBlendFunc();
+		                RenderSystem.enableCull();
+	                pMatrix.popPose();
+
+	                poseStack.popPose();
+                    RenderSystem.applyModelViewMatrix();
+	            }
+	        }
+	    }
+	}
+
+	public void renderDebugAxes(int r, int g, int b, float radius)
+	{
+	    this.setupPolyRendering(true);
+        minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+	    RenderSystem.setShaderTexture(0, new ResourceLocation("vivecraft:textures/white.png"));
+	    this.renderCircle(new Vec3(0.0D, 0.0D, 0.0D), radius, 32, r, g, b, 255, 0);
+	    this.renderCircle(new Vec3(0.0D, 0.01D, 0.0D), radius * 0.75F, 32, r, g, b, 255, 0);
+	    this.renderCircle(new Vec3(0.0D, 0.02D, 0.0D), radius * 0.25F, 32, r, g, b, 255, 0);
+	    this.renderCircle(new Vec3(0.0D, 0.0D, 0.15D), radius * 0.5F, 32, r, g, b, 255, 2);
+	    this.setupPolyRendering(false);
+	}
+
+	public void drawFramebufferNEW(float partialTicks, boolean renderWorldIn, PoseStack matrixstack)
+	{
+	    if (!this.minecraft.noRender)
+	    {
+            Window window = this.minecraft.getWindow();
+            Matrix4f matrix4f = Matrix4f.orthographic(0.0F, (float)((double)window.getWidth() / window.getGuiScale()), 0.0F, (float)((double)window.getHeight() / window.getGuiScale()), 1000.0F, 3000.0F);
+            RenderSystem.setProjectionMatrix(matrix4f);
+            PoseStack posestack = RenderSystem.getModelViewStack();
+            posestack.pushPose();
+	            posestack.setIdentity();
+	            posestack.translate(0.0D, 0.0D, -2000.0D);
+	            RenderSystem.applyModelViewMatrix();
+	            Lighting.setupFor3DItems();
+	            PoseStack posestack1 = new PoseStack();
+	            
+		        int i = (int)(this.minecraft.mouseHandler.xpos() * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth());
+		        int j = (int)(this.minecraft.mouseHandler.ypos() * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight());
+	
+	//	        Window window = this.minecraft.getWindow();
+	//	        RenderSystem.clearColor(0.0F, 0.0F, 0.0F, 0.0F);
+	//	        RenderSystem.clear(16640, Minecraft.ON_OSX);
+	//	        GL43.glMatrixMode(5889);
+	//	        GL43.glPushMatrix();
+	//	        GL43.glLoadIdentity();
+	//	        GL43.glOrtho(0.0D, (double)window.getScreenWidth() / window.getGuiScale(), (double)window.getScreenHeight() / window.getGuiScale(), 0.0D, 1000.0D, 3000.0D);
+	//	        GL43.glMatrixMode(5888);
+	//	        GL43.glPushMatrix();
+	//	        GL43.glLoadIdentity();
+	//	        GL43.glTranslatef(0.0F, 0.0F, -2000.0F);
+	//	        Lighting.setupFor3DItems();
+	//	        RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+		        GlStateManager.alphaFunc(516, 0.01F);
+		
+		        if (this.lightTexture.isCustom())
+		        {
+		            this.lightTexture.setAllowed(false);
+		        }
+		
+		        //this.lightTexture.turnOffLightLayer();
+		        this.minecraft.pumpkineffect = 0.0F;
+		
+		        if (renderWorldIn && this.minecraft.level != null && (!this.minecraft.options.hideGui || this.minecraft.screen != null))
+		        {
+	                this.minecraft.getProfiler().popPush("gui");
+	                
+		            if (Reflector.ForgeIngameGui.exists())
+		            {
+		            	Reflector.call(Reflector.OverlayRegistry_enableOverlay, Reflector.getFieldValue(Reflector.ForgeIngameGui_CROSSHAIR_ELEMENT), false);
+		            	Reflector.call(Reflector.OverlayRegistry_enableOverlay ,Reflector.getFieldValue(Reflector.ForgeIngameGui_HELMET_ELEMENT), false);
+		            	Reflector.call(Reflector.OverlayRegistry_enableOverlay ,Reflector.getFieldValue(Reflector.ForgeIngameGui_PORTAL_ELEMENT), false);
+		            	Reflector.call(Reflector.OverlayRegistry_enableOverlay ,Reflector.getFieldValue(Reflector.ForgeIngameGui_VIGNETTE_ELEMENT), false);
+		            }
+	                
+	//	            if (this.minecraft.player != null)
+	//                {
+	//                    float f = Mth.lerp(pPartialTicks, this.minecraft.player.oPortalTime, this.minecraft.player.portalTime);
+	//
+	//                    if (f > 0.0F && this.minecraft.player.hasEffect(MobEffects.CONFUSION) && this.minecraft.options.screenEffectScale < 1.0F)
+	//                    {
+	//                        this.renderConfusionOverlay(f * (1.0F - this.minecraft.options.screenEffectScale));
+	//                    }
+	//                }
+		
+		            if (!Main.viewonly)
+		            {
+		                this.minecraft.gui.render(posestack1, partialTicks);
+		            }
+		
+		            if (this.minecraft.options.ofShowFps && !this.minecraft.options.renderDebug)
+		            {
+		                Config.drawFps(matrixstack);
+		            }
+		
+		            if (this.minecraft.options.renderDebug)
+		            {
+		                Lagometer.showLagometer(matrixstack, (int)this.minecraft.getWindow().getGuiScale());
+		            }
+
+		            this.minecraft.getProfiler().pop();
+		            RenderSystem.clear(256, Minecraft.ON_OSX);
+		        }
+	
+		
+	            if (this.guiLoadingVisible != (this.minecraft.getOverlay() != null))
+	            {
+	                if (this.minecraft.getOverlay() != null)
+	                {
+	                    LoadingOverlay.registerTextures(this.minecraft);
+	
+	                    if (this.minecraft.getOverlay() instanceof LoadingOverlay)
+	                    {
+	                        LoadingOverlay loadingoverlay = (LoadingOverlay)this.minecraft.getOverlay();
+	                        loadingoverlay.update();
+	                    }
+	                }
+	
+	                this.guiLoadingVisible = this.minecraft.getOverlay() != null;
+	            }
+		
+	            if (this.minecraft.getOverlay() != null)
+	            {
+	                try
+	                {
+	                    this.minecraft.getOverlay().render(posestack1, i, j, this.minecraft.getDeltaFrameTime());
+	                }
+	                catch (Throwable throwable1)
+	                {
+	                    CrashReport crashreport2 = CrashReport.forThrowable(throwable1, "Rendering overlay");
+	                    CrashReportCategory crashreportcategory2 = crashreport2.addCategory("Overlay render details");
+	                    crashreportcategory2.setDetail("Overlay name", () ->
+	                    {
+	                        return this.minecraft.getOverlay().getClass().getCanonicalName();
+	                    });
+	                    throw new ReportedException(crashreport2);
+	                }
+	            }
+	            else if (this.minecraft.screen != null)
+	            {
+	                try
+	                {
+	                    if (Config.isCustomEntityModels())
+	                    {
+	                        CustomEntityModels.onRenderScreen(this.minecraft.screen);
+	                    }
+	
+	                    if (Reflector.ForgeHooksClient_drawScreen.exists())
+	                    {
+	                        Reflector.callVoid(Reflector.ForgeHooksClient_drawScreen, this.minecraft.screen, posestack1, i, j, this.minecraft.getDeltaFrameTime());
+	                    }
+	                    else
+	                    {
+	                        this.minecraft.screen.render(posestack1, i, j, this.minecraft.getDeltaFrameTime());
+	                    }
+	                    //Vivecraft
+	                    this.minecraft.gui.drawMouseMenuQuad(i, j);
+	                }
+	                catch (Throwable throwable2)
+	                {
+	                    CrashReport crashreport = CrashReport.forThrowable(throwable2, "Rendering screen");
+	                    CrashReportCategory crashreportcategory = crashreport.addCategory("Screen render details");
+	                    crashreportcategory.setDetail("Screen name", () ->
+	                    {
+	                        return this.minecraft.screen.getClass().getCanonicalName();
+	                    });
+	                    crashreportcategory.setDetail("Mouse location", () ->
+	                    {
+	                        return String.format(Locale.ROOT, "Scaled: (%d, %d). Absolute: (%f, %f)", i, j, this.minecraft.mouseHandler.xpos(), this.minecraft.mouseHandler.ypos());
+	                    });
+	                    crashreportcategory.setDetail("Screen size", () ->
+	                    {
+	                        return String.format(Locale.ROOT, "Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %f", this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight(), this.minecraft.getWindow().getGuiScale());
+	                    });
+	                    throw new ReportedException(crashreport);
+	                }
+	
+	                try
+	                {
+	                    if (this.minecraft.screen != null)
+	                    {
+	                        this.minecraft.screen.handleDelayedNarration();
+	                    }
+	                }
+	                catch (Throwable throwable1)
+	                {
+	                    CrashReport crashreport1 = CrashReport.forThrowable(throwable1, "Narrating screen");
+	                    CrashReportCategory crashreportcategory1 = crashreport1.addCategory("Screen details");
+	                    crashreportcategory1.setDetail("Screen name", () ->
+	                    {
+	                        return this.minecraft.screen.getClass().getCanonicalName();
+	                    });
+	                    throw new ReportedException(crashreport1);
+	                }
+	            }
+	
+	            this.lightTexture.setAllowed(true);
+            posestack.popPose();
+            RenderSystem.applyModelViewMatrix();
+        }
+	
+	    if (this.minecraft.options.renderDebugCharts && !this.minecraft.options.hideGui)
+	    {
+	        this.minecraft.drawProfiler();
+	    }
+	
+	    this.frameFinish();
+	    this.waitForServerThread();
+	    MemoryMonitor.update();
+	    Lagometer.updateLagometer();
+	
+	    if (this.minecraft.options.ofProfiler)
+	    {
+	        this.minecraft.options.renderDebugCharts = true;
+	    }
+	
+	    //TODO: does this do anything?
+	    this.minecraft.getMainRenderTarget().bindRead();
+	    this.minecraft.getMainRenderTarget().genMipMaps();
+	    this.minecraft.getMainRenderTarget().unbindRead();
+
+	}
+
+	public Vec3 getControllerRenderPos(int c)
+	{
+	    if (!this.minecraft.vrSettings.seated)
+	    {
+	        return this.minecraft.vrPlayer.vrdata_world_render.getController(c).getPosition();
+	    }
+	    else
+	    {
+	        Vec3 vec3;
+	
+	        if (this.minecraft.getCameraEntity() != null && this.minecraft.level != null)
+	        {
+	            Vec3 vec32 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getDirection();
+	            vec32 = vec32.yRot((float)Math.toRadians(c == 0 ? -35.0D : 35.0D));
+	            vec32 = new Vec3(vec32.x, 0.0D, vec32.z);
+	            vec32 = vec32.normalize();
+	            RenderPass renderpass = RenderPass.CENTER;
+	            vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(renderpass).getPosition().add(vec32.x * 0.3D * (double)this.minecraft.vrPlayer.vrdata_world_render.worldScale, -0.4D * (double)this.minecraft.vrPlayer.vrdata_world_render.worldScale, vec32.z * 0.3D * (double)this.minecraft.vrPlayer.vrdata_world_render.worldScale);
+	            
+	            if (TelescopeTracker.isTelescope(minecraft.player.getUseItem())){
+	            	if (c==0 && minecraft.player.getUsedItemHand() == InteractionHand.MAIN_HAND)
+	            		vec3 = this.minecraft.vrPlayer.vrdata_world_render.eye0.getPosition().add(this.minecraft.vrPlayer.vrdata_world_render.hmd.getDirection().scale(0.2*this.minecraft.vrPlayer.vrdata_world_render.worldScale));
+	            	if (c==1 && minecraft.player.getUsedItemHand() == InteractionHand.OFF_HAND)
+	            		vec3 = this.minecraft.vrPlayer.vrdata_world_render.eye1.getPosition().add(this.minecraft.vrPlayer.vrdata_world_render.hmd.getDirection().scale(0.2*this.minecraft.vrPlayer.vrdata_world_render.worldScale));
+	            }
+
+	        }
+	        else
+	        {
+	            Vec3 vec31 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getDirection();
+	            vec31 = vec31.yRot((float)Math.toRadians(c == 0 ? -35.0D : 35.0D));
+	            vec31 = new Vec3(vec31.x, 0.0D, vec31.z);
+	            vec31 = vec31.normalize();
+	            vec3 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getPosition().add(vec31.x * 0.3D, -0.4D, vec31.z * 0.3D);
+	        }
+	
+	        return vec3;
+	    }
+	}
+
+	public void SetupRenderingAtController(int controller, PoseStack matrix)
+	{
+		Vec3 vec3 = this.getControllerRenderPos(controller);
+		vec3 = vec3.subtract(this.minecraft.vrPlayer.getVRDataWorld().getEye(this.minecraft.currentPass).getPosition());
+		matrix.translate((double)((float)vec3.x), (double)((float)vec3.y), (double)((float)vec3.z));
+		float sc = this.minecraft.vrPlayer.vrdata_world_render.worldScale;
+		if (minecraft.level != null && TelescopeTracker.isTelescope(minecraft.player.getUseItem())) {
+			matrix.mulPoseMatrix(this.minecraft.vrPlayer.vrdata_world_render.hmd.getMatrix().inverted().transposed().toMCMatrix());
+			matrix.rotateDegXp(90);
+			matrix.translate(controller==0?0.075*sc:-0.075*sc,-0.025*sc, 0.0325*sc);
+		} else {
+			matrix.mulPoseMatrix(this.minecraft.vrPlayer.vrdata_world_render.getController(controller).getMatrix().inverted().transposed().toMCMatrix());
+		}
+		
+		matrix.scale(sc, sc, sc);
+
+	}
+
+	public void renderFlatQuad(Vec3 pos, float width, float height, float yaw, int r, int g, int b, int a, PoseStack poseStack)
+	{
+	    Tesselator tesselator = Tesselator.getInstance();
+	    tesselator.getBuilder().begin(Mode.QUADS, DefaultVertexFormat.POSITION_COLOR_NORMAL);
+	    Vec3 vec3 = (new Vec3((double)(-width / 2.0F), 0.0D, (double)(height / 2.0F))).yRot((float)Math.toRadians((double)(-yaw)));
+	    Vec3 vec31 = (new Vec3((double)(-width / 2.0F), 0.0D, (double)(-height / 2.0F))).yRot((float)Math.toRadians((double)(-yaw)));
+	    Vec3 vec32 = (new Vec3((double)(width / 2.0F), 0.0D, (double)(-height / 2.0F))).yRot((float)Math.toRadians((double)(-yaw)));
+	    Vec3 vec33 = (new Vec3((double)(width / 2.0F), 0.0D, (double)(height / 2.0F))).yRot((float)Math.toRadians((double)(-yaw)));    
+	    Matrix4f mat = poseStack.last().pose();    
+	    tesselator.getBuilder().vertex(mat, (float)(pos.x + vec3.x), (float)pos.y, (float)(pos.z + vec3.z)).color(r, g, b, a).normal(0.0F, 1.0F, 0.0F).endVertex();
+	    tesselator.getBuilder().vertex(mat, (float)(pos.x + vec31.x), (float)pos.y, (float)(pos.z + vec31.z)).color(r, g, b, a).normal(0.0F, 1.0F, 0.0F).endVertex();
+	    tesselator.getBuilder().vertex(mat, (float)(pos.x + vec32.x), (float)pos.y, (float)(pos.z + vec32.z)).color(r, g, b, a).normal(0.0F, 1.0F, 0.0F).endVertex();
+	    tesselator.getBuilder().vertex(mat, (float)(pos.x + vec33.x), (float)pos.y, (float)(pos.z + vec33.z)).color(r, g, b, a).normal(0.0F, 1.0F, 0.0F).endVertex();
+	    tesselator.end();
+	}
+
+	public void renderCircle(Vec3 pos, float radius, int edges, int r, int g, int b, int a, int side)
+	{
+	    Tesselator tesselator = Tesselator.getInstance();
+	    tesselator.getBuilder().begin(Mode.TRIANGLE_FAN, DefaultVertexFormat.POSITION_COLOR);
+	    tesselator.getBuilder().vertex(pos.x, pos.y, pos.z).color(r, g, b, a).endVertex();
+	
+	    for (int i = 0; i < edges + 1; ++i)
+	    {
+	        float f = (float)i / (float)edges * (float)Math.PI * 2.0F;
+	
+	        if (side != 0 && side != 1)
+	        {
+	            if (side != 2 && side != 3)
+	            {
+	                if (side == 4 || side == 5)
+	                {
+	                    float f5 = (float)pos.x;
+	                    float f7 = (float)pos.y + (float)Math.cos((double)f) * radius;
+	                    float f9 = (float)pos.z + (float)Math.sin((double)f) * radius;
+	                    tesselator.getBuilder().vertex((double)f5, (double)f7, (double)f9).color(r, g, b, a).endVertex();
+	                }
+	            }
+	            else
+	            {
+	                float f4 = (float)pos.x + (float)Math.cos((double)f) * radius;
+	                float f6 = (float)pos.y + (float)Math.sin((double)f) * radius;
+	                float f8 = (float)pos.z;
+	                tesselator.getBuilder().vertex((double)f4, (double)f6, (double)f8).color(r, g, b, a).endVertex();
+	            }
+	        }
+	        else
+	        {
+	            float f1 = (float)pos.x + (float)Math.cos((double)f) * radius;
+	            float f2 = (float)pos.y;
+	            float f3 = (float)pos.z + (float)Math.sin((double)f) * radius;
+	            tesselator.getBuilder().vertex((double)f1, (double)f2, (double)f3).color(r, g, b, a).endVertex();
+	        }
+	    }
+	
+	    tesselator.end();
+	}
+
+	private void renderBox(Tesselator tes, Vec3 start, Vec3 end, float minX, float maxX, float minY, float maxY, Vec3 up, Vec3i color, byte alpha, PoseStack poseStack)
+	{
+	    Vec3 vec3 = start.subtract(end).normalize();
+	    Vec3 vec31 = vec3.cross(up);
+	    up = vec31.cross(vec3);
+	    Vec3 vec32 = new Vec3(vec31.x * (double)minX, vec31.y * (double)minX, vec31.z * (double)minX);
+	    vec31 = vec31.scale((double)maxX);
+	    Vec3 vec33 = new Vec3(up.x * (double)minY, up.y * (double)minY, up.z * (double)minY);
+	    up = up.scale((double)maxY);
+	    org.vivecraft.utils.lwjgl.Vector3f vector3f = Utils.convertToVector3f(vec3);
+	    org.vivecraft.utils.lwjgl.Vector3f vector3f1 = Utils.convertToVector3f(up.normalize());
+	    org.vivecraft.utils.lwjgl.Vector3f vector3f2 = Utils.convertToVector3f(vec31.normalize());
+	    Vec3 vec34 = start.add(vec31.x + vec33.x, vec31.y + vec33.y, vec31.z + vec33.z);
+	    Vec3 vec35 = start.add(vec31.x + up.x, vec31.y + up.y, vec31.z + up.z);
+	    Vec3 vec36 = start.add(vec32.x + vec33.x, vec32.y + vec33.y, vec32.z + vec33.z);
+	    Vec3 vec37 = start.add(vec32.x + up.x, vec32.y + up.y, vec32.z + up.z);
+	    Vec3 vec38 = end.add(vec31.x + vec33.x, vec31.y + vec33.y, vec31.z + vec33.z);
+	    Vec3 vec39 = end.add(vec31.x + up.x, vec31.y + up.y, vec31.z + up.z);
+	    Vec3 vec310 = end.add(vec32.x + vec33.x, vec32.y + vec33.y, vec32.z + vec33.z);
+	    Vec3 vec311 = end.add(vec32.x + up.x, vec32.y + up.y, vec32.z + up.z);
+	    BufferBuilder bufferbuilder = tes.getBuilder();
+	    Matrix4f mat = poseStack.last().pose();
+	    bufferbuilder.vertex(mat,(float)vec34.x, (float)vec34.y, (float)vec34.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f.x, vector3f.y, vector3f.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec36.x, (float)vec36.y, (float)vec36.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f.x, vector3f.y, vector3f.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec37.x, (float)vec37.y, (float)vec37.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f.x, vector3f.y, vector3f.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec35.x, (float)vec35.y, (float)vec35.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f.x, vector3f.y, vector3f.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec310.x,(float) vec310.y, (float)vec310.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f.x, -vector3f.y, -vector3f.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec38.x, (float)vec38.y, (float)vec38.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f.x, -vector3f.y, -vector3f.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec39.x, (float)vec39.y, (float)vec39.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f.x, -vector3f.y, -vector3f.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec311.x, (float)vec311.y, (float)vec311.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f.x, -vector3f.y, -vector3f.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec38.x, (float)vec38.y, (float)vec38.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f2.x, vector3f2.y, vector3f2.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec34.x, (float)vec34.y, (float)vec34.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f2.x, vector3f2.y, vector3f2.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec35.x, (float)vec35.y, (float)vec35.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f2.x, vector3f2.y, vector3f2.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec39.x, (float)vec39.y, (float)vec39.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f2.x, vector3f2.y, vector3f2.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec36.x, (float)vec36.y, (float)vec36.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f2.x, -vector3f2.y, -vector3f2.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec310.x, (float)vec310.y, (float)vec310.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f2.x, -vector3f2.y, -vector3f2.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec311.x, (float)vec311.y, (float)vec311.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f2.x, -vector3f2.y, -vector3f2.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec37.x, (float)vec37.y, (float)vec37.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f2.x, -vector3f2.y, -vector3f2.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec37.x, (float)vec37.y, (float)vec37.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f1.x, vector3f1.y, vector3f1.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec311.x, (float)vec311.y, (float)vec311.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f1.x, vector3f1.y, vector3f1.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec39.x, (float)vec39.y, (float)vec39.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f1.x, vector3f1.y, vector3f1.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec35.x, (float)vec35.y, (float)vec35.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f1.x, vector3f1.y, vector3f1.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec310.x, (float)vec310.y, (float)vec310.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f1.x, -vector3f1.y, -vector3f1.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec36.x, (float)vec36.y, (float)vec36.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f1.x, -vector3f1.y, -vector3f1.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec34.x, (float)vec34.y, (float)vec34.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f1.x, -vector3f1.y, -vector3f1.z).endVertex();
+	    bufferbuilder.vertex(mat,(float)vec38.x, (float)vec38.y, (float)vec38.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f1.x, -vector3f1.y, -vector3f1.z).endVertex();
+	}
+	
+	private void renderJrbuddasAwesomeMainMenuRoomNew(PoseStack pMatrixStack)
+	{
+		int i = 4;
+		float f = 2.5F;
+		float f1 = 1.3F;
+		float[] afloat = this.minecraft.vr.getPlayAreaSize();
+		if(afloat == null)
+			afloat = new float[]{2,2};
+
+		BufferBuilder bufferbuilder = Tesselator.getInstance().getBuilder();
+		RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+		RenderSystem.depthFunc(519);
+		RenderSystem.depthMask(false);
+		RenderSystem.enableBlend();
+		RenderSystem.defaultBlendFunc();
+		RenderSystem.enableTexture();
+		RenderSystem.setShaderTexture(0, Screen.BACKGROUND_LOCATION);
+		RenderSystem.setShaderColor(1,1,1,1);
+		pMatrixStack.pushPose();
+			float f2 = afloat[0] + f1;
+			float f3 = afloat[1] + f1;
+			pMatrixStack.translate(-f2 / 2.0F, 0.0F, -f3 / 2.0F);
+	
+			Matrix4f matrix4f = pMatrixStack.last().pose();
+			bufferbuilder.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
+	
+			float a, b, c, d;
+			a = b = c= d= 0.8f;
+			
+			bufferbuilder.vertex(matrix4f, 0,0,0).uv(0,0).color(a,b,c,d).normal(0,1,0).endVertex();
+			bufferbuilder.vertex(matrix4f, 0,0,f3).uv(0,i*f3).color(a,b,c,d).normal(0,1,0).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,0,f3).uv(i*f2,i*f3).color(a,b,c,d).normal(0,1,0).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,0,0).uv(i*f2,0).color(a,b,c,d).normal(0,1,0).endVertex();
+	
+			bufferbuilder.vertex(matrix4f, 0,f,f3).uv(0,0).color(a,b,c,d).normal(0,-1,0).endVertex();
+			bufferbuilder.vertex(matrix4f, 0,f,0).uv(0,i*f3).color(a,b,c,d).normal(0,-1,0).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,f,0).uv(i*f2,i*f3).color(a,b,c,d).normal(0,-1,0).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,f,f3).uv(i*f2,0).color(a,b,c,d).normal(0,-1,0).endVertex();
+	
+			bufferbuilder.vertex(matrix4f, 0,0,0).uv(0,0).color(a,b,c,d).normal(1,0,0).endVertex();
+			bufferbuilder.vertex(matrix4f, 0,f,0).uv(0,i*f).color(a,b,c,d).normal(1,0,0).endVertex();
+			bufferbuilder.vertex(matrix4f, 0,f,f3).uv(i*f3,i*f).color(a,b,c,d).normal(1,0,0).endVertex();
+			bufferbuilder.vertex(matrix4f, 0,0,f3).uv(i*f3,0).color(a,b,c,d).normal(1,0,0).endVertex();
+	
+			bufferbuilder.vertex(matrix4f, f2,0,0).uv(0,0).color(a,b,c,d).normal(-1,0,0).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,0,f3).uv(i*f3,0).color(a,b,c,d).normal(-1,0,0).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,f,f3).uv(i*f3,i*f).color(a,b,c,d).normal(-1,0,0).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,f,0).uv(0,i*f).color(a,b,c,d).normal(-1,0,0).endVertex();
+	
+			bufferbuilder.vertex(matrix4f, 0,0,0).uv(0,0).color(a,b,c,d).normal(0,0,1).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,0,0).uv(i*f2,0).color(a,b,c,d).normal(0,0,1).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,f,0).uv(i*f2,i*f).color(a,b,c,d).normal(0,0,1).endVertex();
+			bufferbuilder.vertex(matrix4f, 0,f,0).uv(0,i*f).color(a,b,c,d).normal(0,0,1).endVertex();
+	
+			bufferbuilder.vertex(matrix4f, 0,0,f3).uv(0,0).color(a,b,c,d).normal(0,0,-1).endVertex();
+			bufferbuilder.vertex(matrix4f, 0,f,f3).uv(0,i*f).color(a,b,c,d).normal(0,0,-1).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,f,f3).uv(i*f2,i*f).color(a,b,c,d).normal(0,0,-1).endVertex();
+			bufferbuilder.vertex(matrix4f, f2,0,f3).uv(i*f2,0).color(a,b,c,d).normal(0,0,-1).endVertex();
+	
+			bufferbuilder.end();
+			BufferUploader.end(bufferbuilder);
+		pMatrixStack.popPose();
+
+	}
+	
+//	private void renderJrbuddasAwesomeMainMenuRoom()
+//	{
+//	    GlStateManager._clearColor(0.1F, 0.1F, 0.1F, 0.1F);
+//	    GlStateManager.clear(16384);
+//	    GlStateManager._disableBlend();
+//	    GlStateManager.color4f(0.5F, 0.5F, 0.5F, 1.0F);
+//	    GlStateManager._enableDepthTest();
+//	    GlStateManager._enableTexture();
+//	    //GlStateManager._enableLighting();
+//	    //GlStateManager._enableLight(0);
+//	    GlStateManager._enableCull();
+//	    //GlStateManager._enableColorMaterial();
+//	    //GlStateManager._colorMaterial(1032, 5634);
+//	    Minecraft.getInstance().getTextureManager().bindForSetup(Screen.BACKGROUND_LOCATION);
+//	    int i = 4;
+//	    float f = 2.5F;
+//	    float f1 = 1.3F;
+//	    float[] afloat = this.minecraft.vr.getPlayAreaSize();
+//	
+//	    if (afloat != null)
+//	    {
+//	        float f2 = afloat[0] + f1;
+//	        float f3 = afloat[1] + f1;
+//	        GL43.glPushMatrix();
+//	        GL11.glTranslatef(-f2 / 2.0F, 0.0F, -f3 / 2.0F);
+//	        GL11.glLightfv(16384, 4611, this.setColorBuffer(f2 / 2.0F, 1.8F, f3 / 2.0F, 1.0F));
+//	        GL11.glLightfv(16384, 4609, this.setColorBuffer(1.0F, 1.0F, 1.0F, 1.0F));
+//	        GL11.glLightfv(16384, 4608, this.setColorBuffer(0.2F, 0.2F, 0.2F, 1.0F));
+//	        GL11.glLightfv(16384, 4610, this.setColorBuffer(1.0F, 1.0F, 1.0F, 1.0F));
+//	        GL11.glLightfv(16384, 4615, this.setColorBuffer(1.0F, 0.0F, 0.0F, 0.0F));
+//	        GL11.glLightfv(16384, 4616, this.setColorBuffer(0.0F, 0.0F, 0.0F, 0.0F));
+//	        GL11.glLightfv(16384, 4617, this.setColorBuffer(0.0F, 0.0F, 0.0F, 0.0F));
+//	        GL11.glLightModelfv(2899, this.setColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
+//	        //GlStateManager._shadeModel(7425);
+//	        GL11.glBegin(GL11.GL_QUADS);
+//	        GL11.glNormal3f(0.0F, 1.0F, 0.0F);
+//	        GL11.glTexCoord2f(0.0F, 0.0F);
+//	        GL11.glVertex3f(0.0F, 0.0F, 0.0F);
+//	        GL11.glTexCoord2f(0.0F, (float)i * f3);
+//	        GL11.glVertex3f(0.0F, 0.0F, f3);
+//	        GL11.glTexCoord2f((float)i * f2, (float)i * f3);
+//	        GL11.glVertex3f(f2, 0.0F, f3);
+//	        GL11.glTexCoord2f((float)i * f2, 0.0F);
+//	        GL11.glVertex3f(f2, 0.0F, 0.0F);
+//	        GL11.glEnd();
+//	        
+//	        GL11.glBegin(GL11.GL_QUADS);
+//	        GL11.glNormal3f(0.0F, -1.0F, 0.0F);
+//	        GL11.glTexCoord2f(0.0F, 0.0F);
+//	        GL11.glVertex3f(0.0F, f, 0.0F);
+//	        GL11.glTexCoord2f((float)i * f2, 0.0F);
+//	        GL11.glVertex3f(f2, f, 0.0F);
+//	        GL11.glTexCoord2f((float)i * f2, (float)i * f3);
+//	        GL11.glVertex3f(f2, f, f3);
+//	        GL11.glTexCoord2f(0.0F, (float)i * f3);
+//	        GL11.glVertex3f(0.0F, f, f3);
+//	        GL11.glEnd();
+//	        
+//	        GL11.glBegin(GL11.GL_QUADS);
+//	        GL11.glNormal3f(1.0F, 0.0F, 0.0F);
+//	        GL11.glTexCoord2f(0.0F, 0.0F);
+//	        GL11.glVertex3f(0.0F, 0.0F, 0.0F);
+//	        GL11.glTexCoord2f(0.0F, (float)i * f);
+//	        GL11.glVertex3f(0.0F, f, 0.0F);
+//	        GL11.glTexCoord2f((float)i * f3, (float)i * f);
+//	        GL11.glVertex3f(0.0F, f, f3);
+//	        GL11.glTexCoord2f((float)i * f3, 0.0F);
+//	        GL11.glVertex3f(0.0F, 0.0F, f3);
+//	        GL11.glEnd();
+//	        
+//	        GL11.glBegin(GL11.GL_QUADS);
+//	        GL11.glNormal3f(-1.0F, 0.0F, 0.0F);
+//	        GL11.glTexCoord2f(0.0F, 0.0F);
+//	        GL11.glVertex3f(f2, 0.0F, 0.0F);
+//	        GL11.glTexCoord2f((float)i * f3, 0.0F);
+//	        GL11.glVertex3f(f2, 0.0F, f3);
+//	        GL11.glTexCoord2f((float)i * f3, (float)i * f);
+//	        GL11.glVertex3f(f2, f, f3);
+//	        GL11.glTexCoord2f(0.0F, (float)i * f);
+//	        GL11.glVertex3f(f2, f, 0.0F);
+//	        GL11.glEnd();
+//	        
+//	        GL11.glBegin(GL11.GL_QUADS);
+//	        GL11.glNormal3f(0.0F, 0.0F, 1.0F);
+//	        GL11.glTexCoord2f(0.0F, 0.0F);
+//	        GL11.glVertex3f(0.0F, 0.0F, 0.0F);
+//	        GL11.glTexCoord2f((float)i * f2, 0.0F);
+//	        GL11.glVertex3f(f2, 0.0F, 0.0F);
+//	        GL11.glTexCoord2f((float)i * f2, (float)i * f);
+//	        GL11.glVertex3f(f2, f, 0.0F);
+//	        GL11.glTexCoord2f(0.0F, (float)i * f);
+//	        GL11.glVertex3f(0.0F, f, 0.0F);
+//	        GL11.glEnd();
+//	        GL11.glBegin(GL11.GL_QUADS);
+//	        GL11.glNormal3f(0.0F, 0.0F, -1.0F);
+//	        GL11.glTexCoord2f(0.0F, 0.0F);
+//	        GL11.glVertex3f(0.0F, 0.0F, f3);
+//	        GL11.glTexCoord2f(0.0F, (float)i * f);
+//	        GL11.glVertex3f(0.0F, f, f3);
+//	        GL11.glTexCoord2f((float)i * f2, (float)i * f);
+//	        GL11.glVertex3f(f2, f, f3);
+//	        GL11.glTexCoord2f((float)i * f2, 0.0F);
+//	        GL11.glVertex3f(f2, 0.0F, f3);
+//	        GL11.glEnd();
+//	        GL43.glPopMatrix();
+//	    }
+//	
+//	    //Lighting.turnOff();
+//	}
+
+	private void renderTechjarsAwesomeMainMenuRoom()
+	{/*
+	    GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+	    GlStateManager._enableDepthTest();
+	    GlStateManager._enableTexture();
+	    GlStateManager._enableBlend();
+	    GlStateManager.enableAlphaTest();
+	    GlStateManager._enableCull();
+	    GlStateManager.alphaFunc(516, 0.1F);
+	    //GL43.glPushMatrix();
+	    int i = Calendar.getInstance().get(15);
+	    this.minecraft.menuWorldRenderer.time = this.menuWorldFastTime ? (long)((float)(this.minecraft.tickCounter * 10) + 10.0F * this.minecraft.getFrameTime()) : (long)((double)(System.currentTimeMillis() + (long)i - 21600000L) / 8.64E7D * 24000.0D);
+	    Vec3 vec3 = this.minecraft.menuWorldRenderer.getEyePos();
+	    float f = (float)vec3.x;
+	    float f1 = (float)vec3.y;
+	    float f2 = (float)vec3.z;
+	    this.minecraft.menuWorldRenderer.fogRenderer.updateFogColor();
+	    this.minecraft.menuWorldRenderer.fogRenderer.setupFog(-1);
+	    GlStateManager.clear(16640);
+	    this.minecraft.menuWorldRenderer.renderSky(f, f1, f2, 2);
+	    this.minecraft.menuWorldRenderer.fogRenderer.setupFog(0);
+	
+	    if ((double)f1 < 128.0D + this.minecraft.options.ofCloudsHeight * 128.0D)
+	    {
+	        this.minecraft.menuWorldRenderer.renderClouds(2, (double)f, (double)f1, (double)f2);
+	    }
+	
+	    RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+	    GlStateManager._enableBlend();
+	    this.minecraft.menuWorldRenderer.updateLightmap();
+	    this.minecraft.menuWorldRenderer.fogRenderer.setupFog(0);
+	    this.minecraft.menuWorldRenderer.render();
+	
+	    if ((double)f1 >= 128.0D + this.minecraft.options.ofCloudsHeight * 128.0D)
+	    {
+	        this.minecraft.menuWorldRenderer.renderClouds(2, (double)f, (double)f1, (double)f2);
+	        RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+	        GlStateManager._enableBlend();
+	    }
+	
+	    float[] afloat = this.minecraft.vr.getPlayAreaSize();
+	
+	    if (afloat != null)
+	    {
+	        float f3 = (float)Math.ceil((double)afloat[0]);
+	        float f4 = (float)Math.ceil((double)afloat[1]);
+	        Minecraft.getInstance().getTextureManager().bindForSetup(Screen.BACKGROUND_LOCATION);
+	        float f5 = this.minecraft.menuWorldRenderer.getSunBrightness();
+	        GlStateManager.color4f(f5, f5, f5, 0.3F);
+	        GL11.glTranslatef(-f3 / 2.0F, 0.0F, -f4 / 2.0F);
+	        GL11.glBegin(GL11.GL_QUADS);
+	        GL11.glNormal3f(0.0F, 1.0F, 0.0F);
+	        GL11.glTexCoord2f(0.0F, 0.0F);
+	        GL11.glVertex3f(0.0F, 0.005F, 0.0F);
+	        GL11.glTexCoord2f(0.0F, f4);
+	        GL11.glVertex3f(0.0F, 0.005F, f4);
+	        GL11.glTexCoord2f(f3, f4);
+	        GL11.glVertex3f(f3, 0.005F, f4);
+	        GL11.glTexCoord2f(f3, 0.0F);
+	        GL11.glVertex3f(f3, 0.005F, 0.0F);
+	        GL11.glEnd();
+	    }
+	
+	    GL43.glPopMatrix();
+	    //GlStateManager._disableFog();
+	    RenderSystem.defaultBlendFunc();
+	*/}
+
+	public void renderVRFabulous(float partialTicks, LevelRenderer worldrendererin, boolean menuhandright, boolean menuhandleft, PoseStack pMatrix)
+    {
+		if(minecraft.currentPass == RenderPass.SCOPEL || minecraft.currentPass == RenderPass.SCOPER) return;
+        this.minecraft.getProfiler().popPush("VR");
+        this.renderCrosshairAtDepth(!this.minecraft.vrSettings.useCrosshairOcclusion, pMatrix);
+        this.minecraft.getMainRenderTarget().unbindWrite();
+        worldrendererin.alphaSortVROccludedFramebuffer.clear(Minecraft.ON_OSX);
+        worldrendererin.alphaSortVROccludedFramebuffer.copyDepthFrom(this.minecraft.getMainRenderTarget());
+        worldrendererin.alphaSortVROccludedFramebuffer.bindWrite(true);
+
+        if (this.shouldOccludeGui())
+        {
+            this.renderGuiLayer(partialTicks, false, pMatrix);
+            this.renderVrShadow(partialTicks, false, pMatrix);
+
+            if (KeyboardHandler.Showing)
+            {
+                if (this.minecraft.vrSettings.physicalKeyboard)
+                {
+                    this.renderPhysicalKeyboard(partialTicks, pMatrix);
+                }
+                else
+                {
+                    this.render2D(partialTicks, KeyboardHandler.Framebuffer, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room, false, pMatrix);
+                }
+            }
+
+            if (RadialHandler.isShowing())
+            {
+                this.render2D(partialTicks, RadialHandler.Framebuffer, RadialHandler.Pos_room, RadialHandler.Rotation_room, false, pMatrix);
+            }
+        }
+
+        worldrendererin.alphaSortVRUnoccludedFramebuffer.clear(Minecraft.ON_OSX);
+        worldrendererin.alphaSortVRUnoccludedFramebuffer.bindWrite(true);
+
+        if (!this.shouldOccludeGui())
+        {
+            this.renderGuiLayer(partialTicks, false, pMatrix);
+            this.renderVrShadow(partialTicks, false, pMatrix);
+
+            if (KeyboardHandler.Showing)
+            {
+                if (this.minecraft.vrSettings.physicalKeyboard)
+                {
+                    this.renderPhysicalKeyboard(partialTicks, pMatrix);
+                }
+                else
+                {
+                    this.render2D(partialTicks, KeyboardHandler.Framebuffer, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room, false, pMatrix);
+                }
+            }
+
+            if (RadialHandler.isShowing())
+            {
+                this.render2D(partialTicks, RadialHandler.Framebuffer, RadialHandler.Pos_room, RadialHandler.Rotation_room, false, pMatrix);
+            }
+        }
+
+        this.renderVRSelfEffects(partialTicks);
+        VRWidgetHelper.renderVRThirdPersonCamWidget();
+        VRWidgetHelper.renderVRHandheldCameraWidget();
+        boolean flag = this.shouldRenderHands();
+        this.renderVRHands(partialTicks, flag && menuhandright, flag && menuhandleft, true, true, pMatrix);
+        worldrendererin.alphaSortVRHandsFramebuffer.clear(Minecraft.ON_OSX);
+        worldrendererin.alphaSortVRHandsFramebuffer.copyDepthFrom(this.minecraft.getMainRenderTarget());
+        worldrendererin.alphaSortVRHandsFramebuffer.bindWrite(true);
+        this.renderVRHands(partialTicks, flag && !menuhandright, flag && !menuhandleft, false, false, pMatrix);
+        RenderSystem.enableTexture();
+        RenderSystem.defaultBlendFunc();
+        //RenderSystem.defaultAlphaFunc();
+        GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+        //Lighting.turnBackOn();
+        //Lighting.turnOff();
+        this.minecraft.getMainRenderTarget().bindWrite(true);
+    }
+
+    public void renderVrFast(float partialTicks, boolean secondpass, boolean menuright, boolean menuleft, PoseStack pMatrix)
+    {
+		if(minecraft.currentPass == RenderPass.SCOPEL || minecraft.currentPass == RenderPass.SCOPER) return;
+        this.minecraft.getProfiler().popPush("VR");
+        this.lightTexture.turnOffLightLayer();
+        
+        if (secondpass)
+        {
+            this.renderVrShadow(partialTicks, !this.shouldOccludeGui(), pMatrix);
+        }
+
+        if (!secondpass)
+        {
+            this.renderCrosshairAtDepth(!this.minecraft.vrSettings.useCrosshairOcclusion, pMatrix);
+        }
+
+        if (!secondpass)
+        {
+            VRWidgetHelper.renderVRThirdPersonCamWidget();
+        }
+
+        if (!secondpass)
+        {
+            VRWidgetHelper.renderVRHandheldCameraWidget();
+        }
+
+        if (secondpass)
+        {
+           this.renderGuiLayer(partialTicks, !this.shouldOccludeGui(), pMatrix);
+        }
+
+        if (secondpass && KeyboardHandler.Showing)
+        {
+            if (this.minecraft.vrSettings.physicalKeyboard)
+            {
+                this.renderPhysicalKeyboard(partialTicks, pMatrix);
+            }
+            else
+            {
+                this.render2D(partialTicks, KeyboardHandler.Framebuffer, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room, !this.shouldOccludeGui(), pMatrix);
+            }
+        }
+
+        if (secondpass && RadialHandler.isShowing())
+        {
+            this.render2D(partialTicks, RadialHandler.Framebuffer, RadialHandler.Pos_room, RadialHandler.Rotation_room, !this.shouldOccludeGui(), pMatrix);
+        }
+
+        this.renderVRHands(partialTicks, this.shouldRenderHands(), this.shouldRenderHands(), menuright, menuleft, pMatrix);
+        this.renderVRSelfEffects(partialTicks);
+
+    }
 }
