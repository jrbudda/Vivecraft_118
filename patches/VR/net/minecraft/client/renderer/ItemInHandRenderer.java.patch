--- a/net/minecraft/client/renderer/ItemInHandRenderer.java
+++ b/net/minecraft/client/renderer/ItemInHandRenderer.java
@@ -6,8 +6,14 @@
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import com.mojang.math.Matrix4f;
+import com.mojang.math.Quaternion;
 import com.mojang.math.Vector3f;
+
 import java.util.Objects;
+import java.util.Optional;
+import java.util.stream.Stream;
+import javax.annotation.Nullable;
+import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.player.AbstractClientPlayer;
 import net.minecraft.client.player.LocalPlayer;
@@ -16,21 +22,49 @@
 import net.minecraft.client.renderer.entity.ItemRenderer;
 import net.minecraft.client.renderer.entity.player.PlayerRenderer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.client.resources.model.BakedModel;
+import net.minecraft.core.BlockPos;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.item.ArrowItem;
+import net.minecraft.world.item.BlockItem;
+import net.minecraft.world.item.CompassItem;
 import net.minecraft.world.item.CrossbowItem;
+import net.minecraft.world.item.FishingRodItem;
+import net.minecraft.world.item.FoodOnAStickItem;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.MapItem;
+import net.minecraft.world.item.ShieldItem;
+import net.minecraft.world.item.SwordItem;
+import net.minecraft.world.item.TridentItem;
+import net.minecraft.world.item.UseAnim;
+import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.TorchBlock;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
 import net.optifine.Config;
 import net.optifine.CustomItems;
 import net.optifine.reflect.Reflector;
 import net.optifine.shaders.Shaders;
-
+import org.apache.commons.lang3.tuple.Triple;
+import org.vivecraft.gameplay.trackers.BowTracker;
+import org.vivecraft.gameplay.trackers.SwingTracker;
+import org.vivecraft.gameplay.trackers.TelescopeTracker;
+import org.vivecraft.provider.ControllerType;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.render.VRArmRenderer;
+import org.vivecraft.render.VRFirstPersonArmSwing;
+import org.vivecraft.render.VivecraftItemRendering;
+import org.vivecraft.render.VivecraftItemRendering.VivecraftItemTransformType;
+//TODO: this needs a lot of work
 public class ItemInHandRenderer
 {
     private static final RenderType MAP_BACKGROUND = RenderType.text(new ResourceLocation("textures/map/map_background.png"));
@@ -115,6 +149,8 @@
     private final EntityRenderDispatcher entityRenderDispatcher;
     private final ItemRenderer itemRenderer;
     private static boolean renderItemHand = false;
+    public VRFirstPersonArmSwing swingType = VRFirstPersonArmSwing.Attack;
+    public float xdist = 0.0F;
 
     public ItemInHandRenderer(Minecraft pMinecraft)
     {
@@ -123,6 +159,7 @@
         this.itemRenderer = pMinecraft.getItemRenderer();
     }
 
+    
     public void renderItem(LivingEntity pLivingEntity, ItemStack pItemStack, ItemTransforms.TransformType pTransformType, boolean pLeftHand, PoseStack pMatrixStack, MultiBufferSource pBuffer, int pCombinedLight)
     {
         CustomItems.setRenderOffHand(pLeftHand);
@@ -245,33 +282,49 @@
     {
         boolean flag = pSide != HumanoidArm.LEFT;
         float f = flag ? 1.0F : -1.0F;
-        float f1 = Mth.sqrt(pSwingProgress);
-        float f2 = -0.3F * Mth.sin(f1 * (float)Math.PI);
-        float f3 = 0.4F * Mth.sin(f1 * ((float)Math.PI * 2F));
-        float f4 = -0.4F * Mth.sin(pSwingProgress * (float)Math.PI);
-        pMatrixStack.translate((double)(f * (f2 + 0.64000005F)), (double)(f3 + -0.6F + pEquippedProgress * -0.6F), (double)(f4 + -0.71999997F));
-        pMatrixStack.mulPose(Vector3f.YP.rotationDegrees(f * 45.0F));
-        float f5 = Mth.sin(pSwingProgress * pSwingProgress * (float)Math.PI);
-        float f6 = Mth.sin(f1 * (float)Math.PI);
-        pMatrixStack.mulPose(Vector3f.YP.rotationDegrees(f * f6 * 70.0F));
-        pMatrixStack.mulPose(Vector3f.ZP.rotationDegrees(f * f5 * -20.0F));
+//        float f1 = Mth.sqrt(pSwingProgress);
+//        float f2 = -0.3F * Mth.sin(f1 * (float)Math.PI);
+//        float f3 = 0.4F * Mth.sin(f1 * ((float)Math.PI * 2F));
+//        float f4 = -0.4F * Mth.sin(pSwingProgress * (float)Math.PI);
+//        pMatrixStack.translate((double)(f * (f2 + 0.64000005F)), (double)(f3 + -0.6F + pEquippedProgress * -0.6F), (double)(f4 + -0.71999997F));
+//        pMatrixStack.mulPose(Vector3f.YP.rotationDegrees(f * 45.0F));
+//        float f5 = Mth.sin(pSwingProgress * pSwingProgress * (float)Math.PI);
+//        float f6 = Mth.sin(f1 * (float)Math.PI);
+//        pMatrixStack.mulPose(Vector3f.YP.rotationDegrees(f * f6 * 70.0F));
+//        pMatrixStack.mulPose(Vector3f.ZP.rotationDegrees(f * f5 * -20.0F));
         AbstractClientPlayer abstractclientplayer = this.minecraft.player;
         RenderSystem.setShaderTexture(0, abstractclientplayer.getSkinTextureLocation());
-        pMatrixStack.translate((double)(f * -1.0F), (double)3.6F, 3.5D);
-        pMatrixStack.mulPose(Vector3f.ZP.rotationDegrees(f * 120.0F));
-        pMatrixStack.mulPose(Vector3f.XP.rotationDegrees(200.0F));
-        pMatrixStack.mulPose(Vector3f.YP.rotationDegrees(f * -135.0F));
-        pMatrixStack.translate((double)(f * 5.6F), 0.0D, 0.0D);
-        PlayerRenderer playerrenderer = (PlayerRenderer)this.entityRenderDispatcher.<AbstractClientPlayer>getRenderer(abstractclientplayer);
-
-        if (flag)
-        {
-            playerrenderer.renderRightHand(pMatrixStack, pBuffer, pCombinedLight, abstractclientplayer);
-        }
-        else
-        {
-            playerrenderer.renderLeftHand(pMatrixStack, pBuffer, pCombinedLight, abstractclientplayer);
-        }
+        VRArmRenderer vrarmrenderer = entityRenderDispatcher.armSkinMap.get(abstractclientplayer.getModelName());
+        pMatrixStack.pushPose();
+	
+	        if (abstractclientplayer.swingingArm == InteractionHand.MAIN_HAND && flag)
+	        {
+	            this.transformFirstPersonVR(pMatrixStack, pSide, pSwingProgress);
+	        }
+	
+	        if (abstractclientplayer.swingingArm == InteractionHand.OFF_HAND && !flag)
+	        {
+	            this.transformFirstPersonVR(pMatrixStack, pSide, pSwingProgress);
+	        }
+	//        pMatrixStack.translate((double)(f * -1.0F), (double)3.6F, 3.5D);
+	//        pMatrixStack.mulPose(Vector3f.ZP.rotationDegrees(f * 120.0F));
+	//        pMatrixStack.mulPose(Vector3f.XP.rotationDegrees(200.0F));
+	//        pMatrixStack.mulPose(Vector3f.YP.rotationDegrees(f * -135.0F));
+	//        pMatrixStack.translate((double)(f * 5.6F), 0.0D, 0.0D);
+	        pMatrixStack.scale(0.4f, 0.4F, 0.4F);
+	        boolean slim = abstractclientplayer.getSkinTextureLocation().getPath().equals("slim");
+	        pMatrixStack.translate(slim ? 0.345F * -f : 0.375F * -f, 0, slim ? 0.785F : 0.75F);
+	        pMatrixStack.mulPose(Vector3f.XP.rotationDegrees(-90));
+	        pMatrixStack.mulPose(Vector3f.YP.rotationDegrees(180));	
+	        if (flag)
+	        {
+	            vrarmrenderer.renderRightHand(pMatrixStack, pBuffer, pCombinedLight, abstractclientplayer);
+	        }
+	        else
+	        {
+	            vrarmrenderer.renderLeftHand(pMatrixStack, pBuffer, pCombinedLight, abstractclientplayer);
+	        }
+       pMatrixStack.popPose();
     }
 
     private void applyEatTransform(PoseStack pMatrixStack, float pPartialTicks, HumanoidArm pHand, ItemStack pStack)
@@ -304,6 +357,49 @@
         pMatrixStack.mulPose(Vector3f.YP.rotationDegrees((float)i * -45.0F));
     }
 
+    private void transformFirstPersonVR(PoseStack matrixStackIn, HumanoidArm hand, float swingProgress)
+    {
+        if (swingProgress != 0.0F)
+        {
+            switch (this.swingType)
+            {
+                case Attack:
+                    float f2 = Mth.sin((float)((double)(swingProgress * 3.0F) * Math.PI));
+
+                    if ((double)swingProgress > 0.5D)
+                    {
+                        f2 = Mth.sin((float)((double)swingProgress * Math.PI + Math.PI));
+                    }
+
+                    matrixStackIn.translate(0.0D, 0.0D, (double)0.2F);
+                    matrixStackIn.mulPose(Vector3f.XP.rotationDegrees(f2 * 30.0F));
+                    matrixStackIn.translate(0.0D, 0.0D, (double) - 0.2F);
+                    break;
+
+                case Interact:
+                    float f1 = Mth.sin((float)((double)(swingProgress * 3.0F) * Math.PI));
+
+                    if ((double)swingProgress > 0.5D)
+                    {
+                        f1 = Mth.sin((float)((double)swingProgress * Math.PI + Math.PI));
+                    }
+
+                    matrixStackIn.mulPose(Vector3f.ZP.rotationDegrees((float)(hand == HumanoidArm.RIGHT ? -1 : 1) * f1 * 45.0F));
+                    break;
+
+                case Use:
+                    float f = Mth.sin((float)((double)(swingProgress * 2.0F) * Math.PI));
+
+                    if ((double)swingProgress > 0.25D)
+                    {
+                        f = Mth.sin((float)((double)(swingProgress / 2.0F) * Math.PI + Math.PI));
+                    }
+
+                    matrixStackIn.translate(0.0D, 0.0D, (double)(-(1.0F + f) * 0.1F));
+            }
+        }
+    }
+
     private void applyItemArmTransform(PoseStack pMatrixStack, HumanoidArm pHand, float pEquippedProg)
     {
         int i = pHand == HumanoidArm.RIGHT ? 1 : -1;
@@ -388,189 +484,101 @@
         return pStack.is(Items.CROSSBOW) && CrossbowItem.isCharged(pStack);
     }
 
-    private void renderArmWithItem(AbstractClientPlayer pPlayer, float pPartialTicks, float pPitch, InteractionHand pHand, float pSwingProgress, ItemStack pStack, float pEquippedProgress, PoseStack pMatrixStack, MultiBufferSource pBuffer, int pCombinedLight)
+    void renderArmWithItem(AbstractClientPlayer pPlayer, float pPartialTicks, float pPitch, InteractionHand pHand, float pSwingProgress, ItemStack pStack, float pEquippedProgress, PoseStack pMatrixStack, MultiBufferSource pBuffer, int pCombinedLight)
     {
-        if (!Config.isShaders() || !Shaders.isSkipRenderHand(pHand))
-        {
-            if (!pPlayer.isScoping())
-            {
-                boolean flag = pHand == InteractionHand.MAIN_HAND;
-                HumanoidArm humanoidarm = flag ? pPlayer.getMainArm() : pPlayer.getMainArm().getOpposite();
-                pMatrixStack.pushPose();
+    	if (!Config.isShaders() || !Shaders.isSkipRenderHand(pHand))
+    	{
+    		boolean mainHand = pHand == InteractionHand.MAIN_HAND;
+    		HumanoidArm humanoidarm = mainHand ? pPlayer.getMainArm() : pPlayer.getMainArm().getOpposite();
+    		pEquippedProgress = this.getEquipProgress(pHand, pPartialTicks);
+    		pMatrixStack.pushPose();
+    		boolean renderArm = true;
+
+    		if (this.minecraft.currentPass == RenderPass.THIRD && !this.minecraft.vrSettings.mixedRealityRenderHands)
+    		{
+    			renderArm = false;
+    		}
+
+    		if (this.minecraft.currentPass == RenderPass.CAMERA)
+    		{
+    			renderArm = false;
+    		}
+
+    		if (BowTracker.isBow(pStack) && this.minecraft.bowTracker.isActive((LocalPlayer)pPlayer))
+    		{
+    			renderArm = false;
+    		}
+
+    		if (TelescopeTracker.isTelescope(pStack) && (pHand == InteractionHand.OFF_HAND && this.minecraft.currentPass == RenderPass.SCOPEL || pHand == InteractionHand.MAIN_HAND && this.minecraft.currentPass == RenderPass.SCOPER))
+    		{
+    			renderArm = false;
+    		}
+
+    		if (renderArm && !pPlayer.isInvisible())
+    		{
+    			this.renderPlayerArm(pMatrixStack, pBuffer, pCombinedLight, pEquippedProgress, pSwingProgress, humanoidarm);
+    		}
+
+    		if (!pStack.isEmpty())
+    		{   			
+    			pMatrixStack.pushPose();        
+
+    			if (pPlayer.swingingArm == pHand)
+    				this.transformFirstPersonVR(pMatrixStack, humanoidarm, pSwingProgress);
+
+    			VivecraftItemRendering.VivecraftItemTransformType rendertype = VivecraftItemRendering.getTransformType(pStack, pPlayer, itemRenderer);
+
+    			boolean useLeftHandModelinLeftHand = false;
+
+    			ItemTransforms.TransformType transformType;
+    			if(minecraft.vrSettings.thirdPersonItems) {
+    				useLeftHandModelinLeftHand = true; //test
+    				VivecraftItemRendering.applyThirdPersonItemTransforms(pMatrixStack, rendertype, mainHand, pPlayer, pEquippedProgress, pPartialTicks, pStack, pHand);
+    				transformType = mainHand ? ItemTransforms.TransformType.THIRD_PERSON_RIGHT_HAND : (useLeftHandModelinLeftHand ? ItemTransforms.TransformType.THIRD_PERSON_LEFT_HAND : ItemTransforms.TransformType.THIRD_PERSON_RIGHT_HAND);
+    			}
+    			else {
+    				VivecraftItemRendering.applyFirstPersonItemTransforms(pMatrixStack, rendertype, mainHand, pPlayer, pEquippedProgress, pPartialTicks, pStack, pHand);
+    				transformType = mainHand ? ItemTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : (useLeftHandModelinLeftHand ? ItemTransforms.TransformType.FIRST_PERSON_LEFT_HAND : ItemTransforms.TransformType.FIRST_PERSON_RIGHT_HAND);                
+    			}
+
+    			ItemRenderer.isfphand = true;
+
+    			if (rendertype == VivecraftItemTransformType.Map)
+    			{
+    				RenderSystem.disableCull();
+    				this.renderMap(pMatrixStack, pBuffer, pCombinedLight, pStack);
+    			}
+    			else if (rendertype == VivecraftItemTransformType.Telescope)
+    			{
+    				if (this.minecraft.currentPass != RenderPass.SCOPEL && this.minecraft.currentPass != RenderPass.SCOPER)
+    				{
+    					pMatrixStack.pushPose();
+    					pMatrixStack.scale(0.625F, 0.625F, 0.625F);
+    					pMatrixStack.translate(mainHand ? -0.53D : -0.47D, -0.5D, -0.6D);
+    					//pMatrixStack.mulPose(Vector3f.XP.rotationDegrees(180.0F));
+    					this.minecraft.getBlockRenderer().getModelRenderer().renderModel(pMatrixStack.last(), pBuffer.getBuffer(Sheets.solidBlockSheet()), (BlockState)null, this.minecraft.getModelManager().getModel(TelescopeTracker.scopeModel), 0.5F, 0.5F, 1.0F, pCombinedLight, OverlayTexture.NO_OVERLAY);
+    					pMatrixStack.popPose();
+    				}
+
+    				pMatrixStack.pushPose();
+    				pMatrixStack.translate(mainHand ? -0.01875D : 0.01875D, 0.215D, -0.0626D);
+    				pMatrixStack.mulPose(Vector3f.XP.rotationDegrees(90.0F));
+    				pMatrixStack.mulPose(Vector3f.YP.rotationDegrees(180.0F));
+    				pMatrixStack.mulPose(Vector3f.ZP.rotationDegrees(180.0F));
+    				this.minecraft.gameRenderer.DrawScopeFB(pMatrixStack, pHand == InteractionHand.MAIN_HAND ? 0 : 1);
+    				pMatrixStack.popPose();
+    			}
+    			else
+    			{
+    				this.renderItem(pPlayer, pStack, transformType, !mainHand && useLeftHandModelinLeftHand, pMatrixStack, pBuffer, pCombinedLight);
+    			}
+
+    			ItemRenderer.isfphand = false;
+    			pMatrixStack.popPose();
+    		}
 
-                if (pStack.isEmpty())
-                {
-                    if (flag && !pPlayer.isInvisible())
-                    {
-                        this.renderPlayerArm(pMatrixStack, pBuffer, pCombinedLight, pEquippedProgress, pSwingProgress, humanoidarm);
-                    }
-                }
-                else if (pStack.getItem() instanceof MapItem)
-                {
-                    if (flag && this.offHandItem.isEmpty())
-                    {
-                        this.renderTwoHandedMap(pMatrixStack, pBuffer, pCombinedLight, pPitch, pEquippedProgress, pSwingProgress);
-                    }
-                    else
-                    {
-                        this.renderOneHandedMap(pMatrixStack, pBuffer, pCombinedLight, pEquippedProgress, humanoidarm, pSwingProgress, pStack);
-                    }
-                }
-                else if (pStack.is(Items.CROSSBOW))
-                {
-                    boolean flag2 = CrossbowItem.isCharged(pStack);
-                    boolean flag3 = humanoidarm == HumanoidArm.RIGHT;
-                    int l = flag3 ? 1 : -1;
-
-                    if (pPlayer.isUsingItem() && pPlayer.getUseItemRemainingTicks() > 0 && pPlayer.getUsedItemHand() == pHand)
-                    {
-                        this.applyItemArmTransform(pMatrixStack, humanoidarm, pEquippedProgress);
-                        pMatrixStack.translate((double)((float)l * -0.4785682F), (double) - 0.094387F, (double)0.05731531F);
-                        pMatrixStack.mulPose(Vector3f.XP.rotationDegrees(-11.935F));
-                        pMatrixStack.mulPose(Vector3f.YP.rotationDegrees((float)l * 65.3F));
-                        pMatrixStack.mulPose(Vector3f.ZP.rotationDegrees((float)l * -9.785F));
-                        float f10 = (float)pStack.getUseDuration() - ((float)this.minecraft.player.getUseItemRemainingTicks() - pPartialTicks + 1.0F);
-                        float f14 = f10 / (float)CrossbowItem.getChargeDuration(pStack);
-
-                        if (f14 > 1.0F)
-                        {
-                            f14 = 1.0F;
-                        }
-
-                        if (f14 > 0.1F)
-                        {
-                            float f17 = Mth.sin((f10 - 0.1F) * 1.3F);
-                            float f19 = f14 - 0.1F;
-                            float f20 = f17 * f19;
-                            pMatrixStack.translate((double)(f20 * 0.0F), (double)(f20 * 0.004F), (double)(f20 * 0.0F));
-                        }
-
-                        pMatrixStack.translate((double)(f14 * 0.0F), (double)(f14 * 0.0F), (double)(f14 * 0.04F));
-                        pMatrixStack.scale(1.0F, 1.0F, 1.0F + f14 * 0.2F);
-                        pMatrixStack.mulPose(Vector3f.YN.rotationDegrees((float)l * 45.0F));
-                    }
-                    else
-                    {
-                        float f9 = -0.4F * Mth.sin(Mth.sqrt(pSwingProgress) * (float)Math.PI);
-                        float f13 = 0.2F * Mth.sin(Mth.sqrt(pSwingProgress) * ((float)Math.PI * 2F));
-                        float f16 = -0.2F * Mth.sin(pSwingProgress * (float)Math.PI);
-                        pMatrixStack.translate((double)((float)l * f9), (double)f13, (double)f16);
-                        this.applyItemArmTransform(pMatrixStack, humanoidarm, pEquippedProgress);
-                        this.applyItemArmAttackTransform(pMatrixStack, humanoidarm, pSwingProgress);
-
-                        if (flag2 && pSwingProgress < 0.001F && flag)
-                        {
-                            pMatrixStack.translate((double)((float)l * -0.641864F), 0.0D, 0.0D);
-                            pMatrixStack.mulPose(Vector3f.YP.rotationDegrees((float)l * 10.0F));
-                        }
-                    }
-
-                    this.renderItem(pPlayer, pStack, flag3 ? ItemTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : ItemTransforms.TransformType.FIRST_PERSON_LEFT_HAND, !flag3, pMatrixStack, pBuffer, pCombinedLight);
-                }
-                else
-                {
-                    boolean flag1 = humanoidarm == HumanoidArm.RIGHT;
-
-                    if (pPlayer.isUsingItem() && pPlayer.getUseItemRemainingTicks() > 0 && pPlayer.getUsedItemHand() == pHand)
-                    {
-                        int k = flag1 ? 1 : -1;
-
-                        switch (pStack.getUseAnimation())
-                        {
-                            case NONE:
-                                this.applyItemArmTransform(pMatrixStack, humanoidarm, pEquippedProgress);
-                                break;
-
-                            case EAT:
-                            case DRINK:
-                                this.applyEatTransform(pMatrixStack, pPartialTicks, humanoidarm, pStack);
-                                this.applyItemArmTransform(pMatrixStack, humanoidarm, pEquippedProgress);
-                                break;
-
-                            case BLOCK:
-                                this.applyItemArmTransform(pMatrixStack, humanoidarm, pEquippedProgress);
-                                break;
-
-                            case BOW:
-                                this.applyItemArmTransform(pMatrixStack, humanoidarm, pEquippedProgress);
-                                pMatrixStack.translate((double)((float)k * -0.2785682F), (double)0.18344387F, (double)0.15731531F);
-                                pMatrixStack.mulPose(Vector3f.XP.rotationDegrees(-13.935F));
-                                pMatrixStack.mulPose(Vector3f.YP.rotationDegrees((float)k * 35.3F));
-                                pMatrixStack.mulPose(Vector3f.ZP.rotationDegrees((float)k * -9.785F));
-                                float f7 = (float)pStack.getUseDuration() - ((float)this.minecraft.player.getUseItemRemainingTicks() - pPartialTicks + 1.0F);
-                                float f8 = f7 / 20.0F;
-                                f8 = (f8 * f8 + f8 * 2.0F) / 3.0F;
-
-                                if (f8 > 1.0F)
-                                {
-                                    f8 = 1.0F;
-                                }
-
-                                if (f8 > 0.1F)
-                                {
-                                    float f12 = Mth.sin((f7 - 0.1F) * 1.3F);
-                                    float f15 = f8 - 0.1F;
-                                    float f18 = f12 * f15;
-                                    pMatrixStack.translate((double)(f18 * 0.0F), (double)(f18 * 0.004F), (double)(f18 * 0.0F));
-                                }
-
-                                pMatrixStack.translate((double)(f8 * 0.0F), (double)(f8 * 0.0F), (double)(f8 * 0.04F));
-                                pMatrixStack.scale(1.0F, 1.0F, 1.0F + f8 * 0.2F);
-                                pMatrixStack.mulPose(Vector3f.YN.rotationDegrees((float)k * 45.0F));
-                                break;
-
-                            case SPEAR:
-                                this.applyItemArmTransform(pMatrixStack, humanoidarm, pEquippedProgress);
-                                pMatrixStack.translate((double)((float)k * -0.5F), (double)0.7F, (double)0.1F);
-                                pMatrixStack.mulPose(Vector3f.XP.rotationDegrees(-55.0F));
-                                pMatrixStack.mulPose(Vector3f.YP.rotationDegrees((float)k * 35.3F));
-                                pMatrixStack.mulPose(Vector3f.ZP.rotationDegrees((float)k * -9.785F));
-                                float f11 = (float)pStack.getUseDuration() - ((float)this.minecraft.player.getUseItemRemainingTicks() - pPartialTicks + 1.0F);
-                                float f2 = f11 / 10.0F;
-
-                                if (f2 > 1.0F)
-                                {
-                                    f2 = 1.0F;
-                                }
-
-                                if (f2 > 0.1F)
-                                {
-                                    float f3 = Mth.sin((f11 - 0.1F) * 1.3F);
-                                    float f4 = f2 - 0.1F;
-                                    float f5 = f3 * f4;
-                                    pMatrixStack.translate((double)(f5 * 0.0F), (double)(f5 * 0.004F), (double)(f5 * 0.0F));
-                                }
-
-                                pMatrixStack.translate(0.0D, 0.0D, (double)(f2 * 0.2F));
-                                pMatrixStack.scale(1.0F, 1.0F, 1.0F + f2 * 0.2F);
-                                pMatrixStack.mulPose(Vector3f.YN.rotationDegrees((float)k * 45.0F));
-                        }
-                    }
-                    else if (pPlayer.isAutoSpinAttack())
-                    {
-                        this.applyItemArmTransform(pMatrixStack, humanoidarm, pEquippedProgress);
-                        int i = flag1 ? 1 : -1;
-                        pMatrixStack.translate((double)((float)i * -0.4F), (double)0.8F, (double)0.3F);
-                        pMatrixStack.mulPose(Vector3f.YP.rotationDegrees((float)i * 65.0F));
-                        pMatrixStack.mulPose(Vector3f.ZP.rotationDegrees((float)i * -85.0F));
-                    }
-                    else
-                    {
-                        float f6 = -0.4F * Mth.sin(Mth.sqrt(pSwingProgress) * (float)Math.PI);
-                        float f = 0.2F * Mth.sin(Mth.sqrt(pSwingProgress) * ((float)Math.PI * 2F));
-                        float f1 = -0.2F * Mth.sin(pSwingProgress * (float)Math.PI);
-                        int j = flag1 ? 1 : -1;
-                        pMatrixStack.translate((double)((float)j * f6), (double)f, (double)f1);
-                        this.applyItemArmTransform(pMatrixStack, humanoidarm, pEquippedProgress);
-                        this.applyItemArmAttackTransform(pMatrixStack, humanoidarm, pSwingProgress);
-                    }
-
-                    this.renderItem(pPlayer, pStack, flag1 ? ItemTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : ItemTransforms.TransformType.FIRST_PERSON_LEFT_HAND, !flag1, pMatrixStack, pBuffer, pCombinedLight);
-                }
-
-                pMatrixStack.popPose();
-            }
-        }
+    		pMatrixStack.popPose();
+    	}
     }
 
     public void tick()
@@ -679,4 +687,41 @@
             return pHand == InteractionHand.MAIN_HAND ? RENDER_MAIN_HAND_ONLY : RENDER_OFF_HAND_ONLY;
         }
     }
+
+    public float getEquipProgress(InteractionHand hand, float partialTicks)
+    {
+        return hand == InteractionHand.MAIN_HAND ? 1.0F - (this.oMainHandHeight + (this.mainHandHeight - this.oMainHandHeight) * partialTicks) : 1.0F - (this.oOffHandHeight + (this.offHandHeight - this.oOffHandHeight) * partialTicks);
+    }
+
+    public boolean isInsideOpaqueBlock(Vec3 in)
+    {
+        if (this.minecraft.level == null)
+        {
+            return false;
+        }
+        else
+        {
+            BlockPos blockpos = new BlockPos(in);
+            return this.minecraft.level.getBlockState(blockpos).isSolidRender(this.minecraft.level, blockpos);
+        }
+    }
+
+    @Nullable
+    public Triple<Float, BlockState, BlockPos> getNearOpaqueBlock(Vec3 in, double dist)
+    {
+        if (this.minecraft.level == null)
+        {
+            return null;
+        }
+        else
+        {
+            AABB aabb = new AABB(in.subtract(dist, dist, dist), in.add(dist, dist, dist));
+            Stream<BlockPos> stream = BlockPos.betweenClosedStream(aabb).filter((bp) ->
+            {
+                return this.minecraft.level.getBlockState(bp).isViewBlocking(this.minecraft.level, bp);
+            });
+            Optional<BlockPos> optional = stream.findFirst();
+            return optional.isPresent() ? Triple.of(1.0F, this.minecraft.level.getBlockState(optional.get()), optional.get()) : null;
+        }
+    }
 }
