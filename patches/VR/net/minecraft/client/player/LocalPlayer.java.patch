--- a/net/minecraft/client/player/LocalPlayer.java
+++ b/net/minecraft/client/player/LocalPlayer.java
@@ -1,12 +1,24 @@
 package net.minecraft.client.player;
 
 import com.google.common.collect.Lists;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.UUID;
 import java.util.stream.StreamSupport;
 import javax.annotation.Nullable;
+
+import org.apache.commons.lang3.tuple.Pair;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.gameplay.VRPlayer;
+import org.vivecraft.physicalinventory.TransactionMutex;
+import org.vivecraft.render.VRFirstPersonArmSwing;
+import org.vivecraft.utils.external.jinfinadeck;
+import org.vivecraft.utils.external.jkatvr;
+
 import net.minecraft.client.ClientRecipeBook;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.screens.DeathScreen;
@@ -19,6 +31,7 @@
 import net.minecraft.client.gui.screens.inventory.MinecartCommandBlockEditScreen;
 import net.minecraft.client.gui.screens.inventory.SignEditScreen;
 import net.minecraft.client.gui.screens.inventory.StructureBlockEditScreen;
+import net.minecraft.client.main.Main;
 import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.client.multiplayer.ClientPacketListener;
 import net.minecraft.client.resources.sounds.AmbientSoundHandler;
@@ -31,11 +44,13 @@
 import net.minecraft.client.resources.sounds.UnderwaterAmbientSoundInstances;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ItemParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.game.ServerboundChatPacket;
 import net.minecraft.network.protocol.game.ServerboundClientCommandPacket;
 import net.minecraft.network.protocol.game.ServerboundContainerClosePacket;
+import net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket;
 import net.minecraft.network.protocol.game.ServerboundMovePlayerPacket;
 import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
 import net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket;
@@ -68,8 +83,13 @@
 import net.minecraft.world.item.ElytraItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.item.UseAnim;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.level.BaseCommandBlock;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
@@ -80,9 +100,23 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import net.optifine.reflect.Reflector;
 
 public class LocalPlayer extends AbstractClientPlayer
 {
+    //Vivecraft
+    HashMap<Pair<Short, Integer>, TransactionMutex> pendingTransactions = new HashMap<>();
+    private boolean snapReq = false;
+    public String lastMsg = null;
+    private Vec3 moveMulIn;
+    public int movementTeleportTimer;
+    public boolean initFromServer;
+    public boolean teleported;
+    public double additionX = 0.0D;
+    public double additionZ = 0.0D;
+    public double additionY = 0.0D;
+    public final float PIOVER180 = ((float)Math.PI / 180F);
+    //
     private static final int POSITION_REMINDER_INTERVAL = 20;
     private static final int WATER_VISION_MAX_TIME = 600;
     private static final int WATER_VISION_QUICK_TIME = 100;
@@ -128,7 +162,7 @@
     private boolean wasFallFlying;
     private int waterVisionTime;
     private boolean showDeathScreen = true;
-
+       
     public LocalPlayer(Minecraft pMinecraft, ClientLevel pClientLevel, ClientPacketListener pConnection, StatsCounter pStats, ClientRecipeBook pRecipeBook, boolean pWasShiftKeyDown, boolean pWasSprinting)
     {
         super(pClientLevel, pConnection.getLocalGameProfile());
@@ -143,6 +177,81 @@
         this.ambientSoundHandlers.add(new BiomeAmbientSoundsHandler(this, pMinecraft.getSoundManager(), pClientLevel.getBiomeManager()));
     }
 
+    //physical inventory in shambles
+//    public boolean windowClickSynced(final int windowId, int slotId, int mouseButton, ClickType type, final long timeout)
+//    {
+//        final short short1 = this.containerMenu.backup(this.inventory);
+//        ItemStack itemstack = this.containerMenu.clicked(slotId, mouseButton, type, this);
+//        final TransactionMutex transactionmutex = new TransactionMutex();
+//        Thread thread = new Thread(this.minecraft.backgroundThreadGroup, new Runnable()
+//        {
+//            public void run()
+//            {
+//                try
+//                {
+//                    Thread.sleep(timeout);
+//
+//                    synchronized (transactionmutex)
+//                    {
+//                        if (transactionmutex.consumed)
+//                        {
+//                            return;
+//                        }
+//
+//                        transactionmutex.approved = false;
+//                        transactionmutex.consumed = true;
+//                        LocalPlayer.this.pendingTransactions.remove(Pair.of(short1, windowId));
+//                        transactionmutex.notifyAll();
+//                        LogManager.getLogger().warn("Timeout on window operation " + short1);
+//                    }
+//                }
+//                catch (InterruptedException interruptedexception1)
+//                {
+//                }
+//            }
+//        });
+//        transactionmutex.watchdog = thread;
+//        this.pendingTransactions.put(Pair.of(short1, windowId), transactionmutex);
+//
+//        try
+//        {
+//            synchronized (transactionmutex)
+//            {
+//                this.connection.send(new ServerboundContainerClickPacket(windowId, slotId, mouseButton, type, itemstack, short1));
+//                thread.start();
+//                transactionmutex.wait();
+//                return transactionmutex.approved;
+//            }
+//        }
+//        catch (InterruptedException interruptedexception)
+//        {
+//            interruptedexception.printStackTrace();
+//            return false;
+//        }
+//    }
+
+//    public void confirmTransaction(short transactionID, int windowId, boolean approved)
+//    {
+//        TransactionMutex transactionmutex = this.pendingTransactions.get(Pair.of(transactionID, windowId));
+//
+//        if (transactionmutex != null)
+//        {
+//            synchronized (transactionmutex)
+//            {
+//                if (transactionmutex.consumed)
+//                {
+//                    return;
+//                }
+//
+//                transactionmutex.watchdog.interrupt();
+//                this.pendingTransactions.remove(Pair.of(transactionID, windowId));
+//                transactionmutex.approved = approved;
+//                transactionmutex.consumed = true;
+//                transactionmutex.notifyAll();
+//            }
+//        }
+//    }
+
     public boolean hurt(DamageSource pSource, float pAmount)
     {
         return false;
@@ -165,7 +274,10 @@
                 this.minecraft.getSoundManager().play(new RidingMinecartSoundInstance(this, (AbstractMinecart)pEntity, true));
                 this.minecraft.getSoundManager().play(new RidingMinecartSoundInstance(this, (AbstractMinecart)pEntity, false));
             }
-
+            //Vivecraft
+            this.minecraft.vehicleTracker.onStartRiding(pEntity, this);
+            this.snapReq = true;
+            //
             return true;
         }
     }
@@ -174,6 +286,9 @@
     {
         super.removeVehicle();
         this.handsBusy = false;
+        //Vivecraft
+        this.minecraft.vehicleTracker.onStopRiding(this);
+        //
     }
 
     public float getViewXRot(float pPartialTick)
@@ -190,8 +305,18 @@
     {
         if (this.level.hasChunkAt(this.getBlockX(), this.getBlockZ()))
         {
+        	//Vivecraft
+            this.minecraft.vrPlayer.doPermanantLookOverride(this, this.minecraft.vrPlayer.vrdata_world_pre);
+            //
+            
             super.tick();
-
+            
+        	//Vivecraft        
+            NetworkHelper.overridePose(this);
+            //I dunno if twice is necessary
+            this.minecraft.vrPlayer.doPermanantLookOverride(this, this.minecraft.vrPlayer.vrdata_world_pre);
+            //
+            
             if (this.isPassenger())
             {
                 this.connection.send(new ServerboundMovePlayerPacket.Rot(this.getYRot(), this.getXRot(), this.onGround));
@@ -259,7 +384,22 @@
             boolean flag1 = Mth.lengthSquared(d4, d0, d1) > Mth.square(2.0E-4D) || this.positionReminder >= 20;
             boolean flag2 = d2 != 0.0D || d3 != 0.0D;
 
-            if (this.isPassenger())
+            //Vivecraft
+            if (this.teleported)
+            {
+                this.teleported = false;
+                flag2 = true;
+                ByteBuf bytebuf = Unpooled.buffer();
+                bytebuf.writeFloat((float)this.getX());
+                bytebuf.writeFloat((float)this.getY());
+                bytebuf.writeFloat((float)this.getZ());
+                byte[] abyte = new byte[bytebuf.readableBytes()];
+                bytebuf.readBytes(abyte);
+                ServerboundCustomPayloadPacket serverboundcustompayloadpacket = NetworkHelper.getVivecraftClientPacket(NetworkHelper.PacketDiscriminators.TELEPORT, abyte);
+                this.connection.send(serverboundcustompayloadpacket);
+            }
+            //
+            else if (this.isPassenger())
             {
                 Vec3 vec3 = this.getDeltaMovement();
                 this.connection.send(new ServerboundMovePlayerPacket.PosRot(vec3.x, -999.0D, vec3.z, this.getYRot(), this.getXRot(), this.onGround));
@@ -297,6 +437,14 @@
             }
 
             this.lastOnGround = this.onGround;
+
+            //Vivecraft
+            if (this.minecraft.vrSettings.walkUpBlocks)
+            {
+                this.minecraft.options.autoJump = false;
+            }
+            //
+
             this.autoJumpEnabled = this.minecraft.options.autoJump;
         }
     }
@@ -312,10 +460,33 @@
     public void chat(String pMessage)
     {
         this.connection.send(new ServerboundChatPacket(pMessage));
+        //Vivecraft
+        this.lastMsg = pMessage;
+        //
+    }
+
+    public void swingArm(InteractionHand hand, VRFirstPersonArmSwing animation)
+    {
+        this.minecraft.getItemInHandRenderer().swingType = animation;
+        this.swing(hand);
     }
 
     public void swing(InteractionHand pHand)
     {
+    	//Vivecraft
+        if (!this.swinging)
+        {
+            if (this.minecraft.hitResult != null && this.minecraft.hitResult.getType() != net.minecraft.world.phys.HitResult.Type.MISS)
+            {
+                this.minecraft.getItemInHandRenderer().xdist = (float)this.minecraft.hitResult.getLocation().subtract(this.minecraft.vrPlayer.vrdata_world_pre.getController(pHand.ordinal()).getPosition()).length();
+            }
+            else
+            {
+                this.minecraft.getItemInHandRenderer().xdist = 0.0F;
+            }
+        }
+        //
+
         super.swing(pHand);
         this.connection.send(new ServerboundSwingPacket(pHand));
     }
@@ -552,7 +723,25 @@
 
     public void playSound(SoundEvent pSound, float pVolume, float pPitch)
     {
-        this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), pSound, this.getSoundSource(), pVolume, pPitch, false);
+    	//Forge
+        SoundSource soundsource = this.getSoundSource();
+
+        if (Reflector.ForgeEventFactory_onPlaySoundAtEntity.exists())
+        {
+            Object object = Reflector.ForgeEventFactory_onPlaySoundAtEntity.call(this, pSound, this.getSoundSource(), pVolume, pPitch);
+
+            if (Reflector.callBoolean(object, Reflector.Event_isCanceled) || Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getSound) == null)
+            {
+                return;
+            }
+
+            pSound = (SoundEvent)Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getSound);
+            soundsource = (SoundSource)Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getCategory);
+            pVolume = Reflector.callFloat(object, Reflector.PlaySoundAtEntityEvent_getVolume);
+        }
+
+        this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), pSound, soundsource, pVolume, pPitch, false);
+        //
     }
 
     public void playNotifySound(SoundEvent p_108655_, SoundSource p_108656_, float p_108657_, float p_108658_)
@@ -747,6 +936,7 @@
         boolean flag2 = this.hasEnoughImpulseToStartSprinting();
         this.crouching = !this.getAbilities().flying && !this.isSwimming() && this.canEnterPose(Pose.CROUCHING) && (this.isShiftKeyDown() || !this.isSleeping() && !this.canEnterPose(Pose.STANDING));
         this.input.tick(this.isMovingSlowly());
+        Reflector.call(Reflector.ForgeHooksClient_onInputUpdate, this, this.input);
         this.minecraft.getTutorial().onInput(this.input);
 
         if (this.isUsingItem() && !this.isPassenger())
@@ -846,12 +1036,19 @@
 
         if (this.input.jumping && !flag7 && !flag && !this.getAbilities().flying && !this.isPassenger() && !this.onClimbable())
         {
-            ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
-
-            if (itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack) && this.tryToStartFallFlying())
+            ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);      
+            
+            //Forge
+            boolean eflag = itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack);
+            if(Reflector.IForgeItemStack_canElytraFly.exists()) 
+            	eflag = Reflector.callBoolean(itemstack, Reflector.IForgeItemStack_canElytraFly, this);
+            
+            //Forge
+            if (eflag && this.tryToStartFallFlying()) 
             {
                 this.connection.send(new ServerboundPlayerCommandPacket(this, ServerboundPlayerCommandPacket.Action.START_FALL_FLYING));
             }
+            
         }
 
         this.wasFallFlying = this.isFallFlying();
@@ -937,7 +1134,9 @@
         }
 
         super.aiStep();
-
+        //Vivecraft
+        this.minecraft.vrPlayer.tick(this, this.minecraft, this.random);
+        //
         if (this.onGround && this.getAbilities().flying && !this.minecraft.gameMode.isAlwaysFlying())
         {
             this.getAbilities().flying = false;
@@ -1040,12 +1239,58 @@
         return super.removeEffectNoUpdate(pPotioneffectin);
     }
 
+    //Vivecraft heavily modify
     public void move(MoverType pType, Vec3 pPos)
     {
-        double d0 = this.getX();
-        double d1 = this.getZ();
-        super.move(pType, pPos);
-        this.updateAutoJump((float)(this.getX() - d0), (float)(this.getZ() - d1));
+        this.moveMulIn = this.stuckSpeedMultiplier;
+
+        if (pPos.length() != 0.0D && !this.isPassenger())
+        {
+            boolean flag = VRPlayer.get().getFreeMove();
+            boolean flag1 = flag || Minecraft.getInstance().vrSettings.simulateFalling && !this.onClimbable() && !this.isShiftKeyDown();
+
+            if (this.minecraft.climbTracker.isActive(this) && (flag || this.minecraft.climbTracker.isGrabbingLadder()))
+            {
+                flag1 = true;
+            }
+
+            Vec3 vec3 = VRPlayer.get().roomOrigin;
+
+            if ((this.minecraft.climbTracker.isGrabbingLadder() || flag || this.minecraft.swimTracker.isActive(this)) && (this.zza != 0.0F || this.isFallFlying() || Math.abs(this.getDeltaMovement().x) > 0.01D || Math.abs(this.getDeltaMovement().z) > 0.01D))
+            {
+                double d0 = vec3.x - this.getX();
+                double d1 = vec3.z - this.getZ();
+                double d2 = this.getX();
+                double d3 = this.getZ();
+                super.move(pType, pPos);
+
+                if (this.minecraft.vrSettings.walkUpBlocks)
+                {
+                    this.maxUpStep = this.getMuhJumpFactor() == 1.0F ? 1.0F : 0.6F;
+                }
+                else
+                {
+                    this.maxUpStep = 0.6F;
+                    this.updateAutoJump((float)(this.getX() - d2), (float)(this.getZ() - d3));
+                }
+
+                double d4 = this.getY() + this.getRoomYOffsetFromPose();
+                VRPlayer.get().setRoomOrigin(this.getX() + d0, d4, this.getZ() + d1, false);
+            }
+            else if (flag1)
+            {
+                super.move(pType, new Vec3(0.0D, pPos.y, 0.0D));
+                VRPlayer.get().setRoomOrigin(VRPlayer.get().roomOrigin.x, this.getY() + this.getRoomYOffsetFromPose(), VRPlayer.get().roomOrigin.z, false);
+            }
+            else
+            {
+                this.onGround = true;
+            }
+        }
+        else
+        {
+            super.move(pType, pPos);
+        }
     }
 
     public boolean isAutoJumpEnabled()
@@ -1062,14 +1307,20 @@
             Vec3 vec32 = new Vec3((double)pMovementX, 0.0D, (double)pMovementZ);
             float f = this.getSpeed();
             float f1 = (float)vec32.lengthSqr();
-
+            //Vivecraft
+            float yaw = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getBodyYaw();
+            //
             if (f1 <= 0.001F)
             {
                 Vec2 vec2 = this.input.getMoveVector();
                 float f2 = f * vec2.x;
                 float f3 = f * vec2.y;
-                float f4 = Mth.sin(this.getYRot() * ((float)Math.PI / 180F));
-                float f5 = Mth.cos(this.getYRot() * ((float)Math.PI / 180F));
+                //Vivecraft
+                //float f4 = Mth.sin(this.getYRot() * ((float)Math.PI / 180F));
+                //float f5 = Mth.cos(this.getYRot() * ((float)Math.PI / 180F));
+                float f4 = Mth.sin(yaw * 0.017453292F);
+                float f5 = Mth.cos(yaw * 0.017453292F);
+                //
                 vec32 = new Vec3((double)(f2 * f5 - f3 * f4), vec32.y, (double)(f3 * f5 + f2 * f4));
                 f1 = (float)vec32.lengthSqr();
 
@@ -1131,7 +1382,7 @@
 
                             if (aabb1.intersects(vec37, vec38) || aabb1.intersects(vec39, vec310))
                             {
-                                f11 = (float)aabb1.maxY;
+                            	f11 = (float)aabb1.maxY;
                                 Vec3 vec311 = aabb1.getCenter();
                                 BlockPos blockpos1 = new BlockPos(vec311);
 
@@ -1143,7 +1394,7 @@
 
                                     if (!(voxelshape = blockstate2.getCollisionShape(this.level, blockpos2, collisioncontext)).isEmpty())
                                     {
-                                        f11 = (float)voxelshape.max(Direction.Axis.Y) + (float)blockpos2.getY();
+                                    	f11 = (float)voxelshape.max(Direction.Axis.Y) + (float)blockpos2.getY();
 
                                         if ((double)f11 - this.getY() > (double)f7)
                                         {
@@ -1296,4 +1547,399 @@
     {
         this.minecraft.getTutorial().onInventoryAction(p_172532_, p_172533_, p_172534_);
     }
+
+    //Vivecraft Additions Below
+    @Override
+    public void moveTo(double pX, double p_20109_, double pY, float p_20111_, float pZ)
+    {
+        super.moveTo(pX, p_20109_, pY, p_20111_, pZ);
+
+        if (this.initFromServer)
+        {
+            this.minecraft.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+        }
+    }
+    @Override
+    public void absMoveTo(double pX, double p_19892_, double pY, float p_19894_, float pZ)
+    {
+        super.absMoveTo(pX, p_19892_, pY, p_19894_, pZ);
+        this.minecraft.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+
+        if (!this.initFromServer)
+        {
+            this.moveTo(pX, p_19892_, pY, p_19894_, pZ);
+            this.initFromServer = true;
+        }
+    }
+    @Override
+    public void setPos(double pX, double p_20211_, double pY)
+    {
+        double d0 = this.getX();
+        double d1 = this.getY();
+        double d2 = this.getZ();
+        super.setPos(pX, p_20211_, pY);
+        double d3 = this.getX();
+        double d4 = this.getY();
+        double d5 = this.getZ();
+        Entity entity = this.getVehicle();
+
+        if (this.isPassenger())
+        {
+            Vec3 vec3 = this.minecraft.vehicleTracker.Premount_Pos_Room;
+            vec3 = vec3.yRot(this.minecraft.vrPlayer.vrdata_world_pre.rotation_radians);
+            pX = pX - vec3.x;
+            p_20211_ = this.minecraft.vehicleTracker.getVehicleFloor(entity, p_20211_);
+            pY = pY - vec3.z;
+            this.minecraft.vrPlayer.setRoomOrigin(pX, p_20211_, pY, pX + p_20211_ + pY == 0.0D);
+        }
+        else
+        {
+            Vec3 vec31 = Minecraft.getInstance().vrPlayer.roomOrigin;
+            VRPlayer.get().setRoomOrigin(vec31.x + (d3 - d0), vec31.y + (d4 - d1), vec31.z + (d5 - d2), pX + p_20211_ + pY == 0.0D);
+        }
+    }
+
+    public void doDrag()
+    {
+        float f = 0.91F;
+
+        if (this.onGround)
+        {
+            f = this.level.getBlockState(new BlockPos(this.getX(), this.getBoundingBox().minY - 1.0D, this.getZ())).getBlock().getFriction() * 0.91F;
+        }
+
+        double d0 = (double)f;
+        double d1 = (double)f;
+        this.setDeltaMovement(this.getDeltaMovement().x / d0, this.getDeltaMovement().y, this.getDeltaMovement().z / d1);
+        double d2 = Minecraft.getInstance().vrSettings.inertiaFactor.getFactor();
+        double d3 = this.getBoundedAddition(this.additionX);
+        double d4 = (double)f * d3 / (double)(1.0F - f);
+        double d5 = d4 / ((double)f * (d4 + d3 * d2));
+        d0 = d0 * d5;
+        double d6 = this.getBoundedAddition(this.additionZ);
+        double d7 = (double)f * d6 / (double)(1.0F - f);
+        double d8 = d7 / ((double)f * (d7 + d6 * d2));
+        d1 = d1 * d8;
+        this.setDeltaMovement(this.getDeltaMovement().x * d0, this.getDeltaMovement().y, this.getDeltaMovement().z * d1);
+    }
+
+    
+    public double getBoundedAddition(double orig)
+    {
+        return orig >= -1.0E-6D && orig <= 1.0E-6D ? 1.0E-6D : orig;
+    }
+
+    @Override
+    public void moveRelative(float pAmount, Vec3 pRelative)
+    {
+        double d0 = pRelative.y;
+        double d1 = pRelative.x;
+        double d2 = pRelative.z;
+        VRPlayer vrplayer = this.minecraft.vrPlayer;
+
+        if (vrplayer.getFreeMove())
+        {
+            double d3 = d1 * d1 + d2 * d2;
+            double d4 = 0.0D;
+            double d5 = 0.0D;
+            double d6 = 0.0D;
+            double d7 = 1.0D;
+
+            if (d3 >= (double)1.0E-4F || Main.katvr)
+            {
+                d3 = (double)Mth.sqrt((float) d3);
+
+                if (d3 < 1.0D && !Main.katvr)
+                {
+                    d3 = 1.0D;
+                }
+
+                d3 = (double)pAmount / d3;
+                d1 = d1 * d3;
+                d2 = d2 * d3;
+                Vec3 vec3 = new Vec3(d1, 0.0D, d2);
+                VRPlayer vrplayer1 = this.minecraft.vrPlayer;
+                boolean flag = !this.isPassenger() && (this.getAbilities().flying || this.isSwimming());
+
+                if (Main.katvr)
+                {
+                    jkatvr.query();
+                    d3 = (double)(jkatvr.getSpeed() * jkatvr.walkDirection() * this.minecraft.vrSettings.movementSpeedMultiplier);
+                    vec3 = new Vec3(0.0D, 0.0D, d3);
+
+                    if (flag)
+                    {
+                        vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.hmd.getPitch() * ((float)Math.PI / 180F));
+                    }
+
+                    vec3 = vec3.yRot(-jkatvr.getYaw() * ((float)Math.PI / 180F) + this.minecraft.vrPlayer.vrdata_world_pre.rotation_radians);
+                }
+                else if (Main.infinadeck)
+                {
+                    jinfinadeck.query();
+                    d3 = (double)(jinfinadeck.getSpeed() * jinfinadeck.walkDirection() * this.minecraft.vrSettings.movementSpeedMultiplier);
+                    vec3 = new Vec3(0.0D, 0.0D, d3);
+
+                    if (flag)
+                    {
+                        vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.hmd.getPitch() * ((float)Math.PI / 180F));
+                    }
+
+                    vec3 = vec3.yRot(-jinfinadeck.getYaw() * ((float)Math.PI / 180F) + this.minecraft.vrPlayer.vrdata_world_pre.rotation_radians);
+                }
+                else if (this.minecraft.vrSettings.seated)
+                {
+                    int j = 0;
+
+                    if (this.minecraft.vrSettings.seatedUseHMD)
+                    {
+                        j = 1;
+                    }
+
+                    if (flag)
+                    {
+                        vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.getController(j).getPitch() * ((float)Math.PI / 180F));
+                    }
+
+                    vec3 = vec3.yRot(-vrplayer1.vrdata_world_pre.getController(j).getYaw() * ((float)Math.PI / 180F));
+                }
+                else
+                {
+                    if (flag)
+                    {
+                        switch (this.minecraft.vrSettings.vrFreeMoveMode)
+                        {
+                            case CONTROLLER:
+                                vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.getController(1).getPitch() * ((float)Math.PI / 180F));
+                                break;
+
+                            case HMD:
+                            case RUN_IN_PLACE:
+                            case ROOM:
+                                vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.hmd.getPitch() * ((float)Math.PI / 180F));
+                        }
+                    }
+
+                    if (this.minecraft.jumpTracker.isjumping())
+                    {
+                        vec3 = vec3.yRot(-vrplayer1.vrdata_world_pre.hmd.getYaw() * ((float)Math.PI / 180F));
+                    }
+                    else
+                    {
+                        switch (this.minecraft.vrSettings.vrFreeMoveMode)
+                        {
+                            case CONTROLLER:
+                                vec3 = vec3.yRot(-vrplayer1.vrdata_world_pre.getController(1).getYaw() * ((float)Math.PI / 180F));
+                                break;
+
+                            case HMD:
+                                vec3 = vec3.yRot(-vrplayer1.vrdata_world_pre.hmd.getYaw() * ((float)Math.PI / 180F));
+                                break;
+
+                            case RUN_IN_PLACE:
+                                vec3 = vec3.yRot((float)(-this.minecraft.runTracker.getYaw() * (double)((float)Math.PI / 180F)));
+                                vec3 = vec3.scale(this.minecraft.runTracker.getSpeed());
+
+                            case ROOM:
+                                vec3 = vec3.yRot((180.0F + this.minecraft.vrSettings.worldRotation) * ((float)Math.PI / 180F));
+                        }
+                    }
+                }
+
+                d4 = vec3.x;
+                d6 = vec3.y;
+                d5 = vec3.z;
+
+                if (!this.getAbilities().flying && !this.wasTouchingWater)
+                {
+                    d7 = Minecraft.getInstance().vrSettings.inertiaFactor.getFactor();
+                }
+
+                float f = 1.0F;
+
+                if (this.getAbilities().flying)
+                {
+                    f = 5.0F;
+                }
+
+                this.setDeltaMovement(this.getDeltaMovement().x + d4 * d7, this.getDeltaMovement().y + d6 * (double)f, this.getDeltaMovement().z + d5 * d7);
+                this.additionX = d4;
+                this.additionZ = d5;
+            }
+
+            if (!this.getAbilities().flying && !this.wasTouchingWater)
+            {
+                this.doDrag();
+            }
+        }
+    }
+    
+    private boolean isThePlayer()
+    {
+        return this == Minecraft.getInstance().player;
+    }
+    
+    @Override
+    protected void triggerItemUseEffects(ItemStack pStack, int pCount)
+    {
+        if (!pStack.isEmpty() && this.isUsingItem())
+        {
+            if (pStack.getUseAnimation() == UseAnim.DRINK)
+            {
+                this.playSound(this.getDrinkingSound(pStack), 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+            }
+
+            if (pStack.getUseAnimation() == UseAnim.EAT)
+            {
+                this.addItemParticles(pStack, pCount);
+                this.playSound(this.getEatingSound(pStack), 0.5F + 0.5F * (float)this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            }
+        }
+    }
+    
+
+    private void addItemParticles(ItemStack stack, int count)
+    {
+        for (int i = 0; i < count; ++i)
+        {
+            Vec3 vec3 = new Vec3(((double)this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            vec3 = vec3.xRot(-this.getXRot() * ((float)Math.PI / 180F));
+            vec3 = vec3.yRot(-this.getYRot() * ((float)Math.PI / 180F));
+            double d0 = (double)(-this.random.nextFloat()) * 0.6D - 0.3D;
+            new Vec3(((double)this.random.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+            InteractionHand interactionhand = this.getUsedItemHand();
+            Vec3 vector3d1;
+
+            if (interactionhand == InteractionHand.MAIN_HAND)
+            {
+                vector3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(0).getPosition();
+            }
+            else
+            {
+                vector3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(1).getPosition();
+            }
+
+            this.level.addParticle(new ItemParticleOption(ParticleTypes.ITEM, stack), vector3d1.x, vector3d1.y, vector3d1.z, vec3.x, vec3.y + 0.05D, vec3.z);
+        }
+    }
+
+    public boolean isClimbeyJumpEquipped()
+    {
+        return this.getItemBySlot(EquipmentSlot.FEET) != null && this.minecraft.jumpTracker.isBoots(this.getItemBySlot(EquipmentSlot.FEET));
+    }
+
+    public boolean isClimbeyClimbEquipped()
+    {
+        if (this.getMainHandItem() != null && this.minecraft.climbTracker.isClaws(this.getMainHandItem()))
+        {
+            return true;
+        }
+        else
+        {
+            return this.getOffhandItem() != null && this.minecraft.climbTracker.isClaws(this.getOffhandItem());
+        }
+    }
+    @Override
+    public void die(DamageSource pCause)
+    {
+        super.die(pCause);
+        this.minecraft.vr.triggerHapticPulse(0, 2000);
+        this.minecraft.vr.triggerHapticPulse(1, 2000);
+    }
+
+    public void stepSound(BlockPos blockforNoise, Vec3 soundPos)
+    {
+        BlockState blockstate = this.level.getBlockState(blockforNoise);
+        Block block = blockstate.getBlock();
+        SoundType soundtype = block.getSoundType(blockstate);
+        BlockState blockstate1 = this.level.getBlockState(blockforNoise.above());
+
+        if (blockstate1.getBlock() == Blocks.SNOW)
+        {
+            soundtype = Blocks.SNOW.getSoundType(blockstate1);
+        }
+
+        float f = soundtype.getVolume();
+        float f1 = soundtype.getPitch();
+        SoundEvent soundevent = soundtype.getStepSound();
+
+        if (!this.isSilent() && !block.defaultBlockState().getMaterial().isLiquid())
+        {
+            this.level.playSound((LocalPlayer)null, soundPos.x, soundPos.y, soundPos.z, soundevent, this.getSoundSource(), f, f1);
+        }
+    }
+
+    public void updateSyncFields(LocalPlayer old)
+    {
+        this.xLast = old.xLast;
+        this.yLast1 = old.yLast1;
+        this.zLast = old.zLast;
+        this.yRotLast = old.yRotLast;
+        this.xRotLast = old.xRotLast;
+        this.lastOnGround = old.lastOnGround;
+        this.wasShiftKeyDown = old.wasShiftKeyDown;
+        this.wasSprinting = old.wasSprinting;
+        this.positionReminder = old.positionReminder;
+    }
+    
+    @Override
+    public ItemStack eat(Level p_36185_, ItemStack p_36186_)
+    {
+        if (p_36186_.isEdible() && this == Minecraft.getInstance().player && p_36186_.getHoverName().getString().equals("EAT ME"))
+        {
+            Minecraft.getInstance().vrPlayer.wfMode = 0.5D;
+            Minecraft.getInstance().vrPlayer.wfCount = 400;
+        }
+
+        return super.eat(p_36185_, p_36186_);
+    }
+
+    public float getMuhJumpFactor()
+    {
+        return this.moveMulIn.lengthSqr() > 0.0D ? (float)((double)this.getBlockJumpFactor() * this.moveMulIn.y) : this.getBlockJumpFactor();
+    }
+
+    public float getMuhSpeedFactor()
+    {
+        return this.moveMulIn.lengthSqr() > 0.0D ? (float)((double)this.getBlockSpeedFactor() * (this.moveMulIn.x + this.moveMulIn.z) / 2.0D) : this.getBlockSpeedFactor();
+    }
+    @Override
+    public void releaseUsingItem()
+    {
+        NetworkHelper.sendActiveHand((byte)this.getUsedItemHand().ordinal());
+        super.releaseUsingItem();
+    }
+    
+     public void setItemInUseClient(ItemStack item, InteractionHand hand)
+    {
+        this.useItem = item;
+
+        if (item != ItemStack.EMPTY)
+        {
+            this.startedUsingItem = true;
+            this.usingItemHand = hand;
+        }
+        else
+        {
+            this.startedUsingItem = false;
+            this.usingItemHand = hand;
+        }
+    }
+    
+    public void setItemInUseCountClient(int count)
+    {
+        this.useItemRemaining = count;
+    }
+    
+    public double getRoomYOffsetFromPose()
+    {
+        double d0 = 0.0D;
+
+        if (this.getPose() == Pose.FALL_FLYING || this.getPose() == Pose.SPIN_ATTACK || this.getPose() == Pose.SWIMMING && !this.minecraft.crawlTracker.crawlsteresis)
+        {
+            d0 = -1.2D;
+        }
+
+        return d0;
+    }
 }
