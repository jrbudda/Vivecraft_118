--- a/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/net/minecraft/world/entity/projectile/FishingHook.java
@@ -42,7 +42,12 @@
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import net.optifine.reflect.Reflector;
+
 import org.slf4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
+import org.vivecraft.provider.MCVR;
 
 public class FishingHook extends Projectile
 {
@@ -80,26 +85,48 @@
 
     public FishingHook(Player p_37106_, Level p_37107_, int p_37108_, int p_37109_)
     {
-        this(EntityType.FISHING_BOBBER, p_37107_, p_37108_, p_37109_);
-        this.setOwner(p_37106_);
-        float f = p_37106_.getXRot();
-        float f1 = p_37106_.getYRot();
-        float f2 = Mth.cos(-f1 * ((float)Math.PI / 180F) - (float)Math.PI);
-        float f3 = Mth.sin(-f1 * ((float)Math.PI / 180F) - (float)Math.PI);
-        float f4 = -Mth.cos(-f * ((float)Math.PI / 180F));
-        float f5 = Mth.sin(-f * ((float)Math.PI / 180F));
-        double d0 = p_37106_.getX() - (double)f3 * 0.3D;
-        double d1 = p_37106_.getEyeY();
-        double d2 = p_37106_.getZ() - (double)f2 * 0.3D;
-        this.moveTo(d0, d1, d2, f1, f);
-        Vec3 vec3 = new Vec3((double)(-f3), (double)Mth.clamp(-(f5 / f4), -5.0F, 5.0F), (double)(-f2));
-        double d3 = vec3.length();
-        vec3 = vec3.multiply(0.6D / d3 + 0.5D + this.random.nextGaussian() * 0.0045D, 0.6D / d3 + 0.5D + this.random.nextGaussian() * 0.0045D, 0.6D / d3 + 0.5D + this.random.nextGaussian() * 0.0045D);
-        this.setDeltaMovement(vec3);
-        this.setYRot((float)(Mth.atan2(vec3.x, vec3.z) * (double)(180F / (float)Math.PI)));
-        this.setXRot((float)(Mth.atan2(vec3.y, vec3.horizontalDistance()) * (double)(180F / (float)Math.PI)));
-        this.yRotO = this.getYRot();
-        this.xRotO = this.getXRot();
+    	this(EntityType.FISHING_BOBBER, p_37107_, p_37108_, p_37109_);
+    	this.setOwner(p_37106_);
+    	float f = p_37106_.getXRot();
+    	float f1 = p_37106_.getYRot();
+    	float f2 = Mth.cos(-f1 * ((float)Math.PI / 180F) - (float)Math.PI);
+    	float f3 = Mth.sin(-f1 * ((float)Math.PI / 180F) - (float)Math.PI);
+    	float f4 = -Mth.cos(-f * ((float)Math.PI / 180F));
+    	float f5 = Mth.sin(-f * ((float)Math.PI / 180F));
+    	//Vivecraft
+    	ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(p_37106_.getUUID());
+
+    	if (serverviveplayer != null && serverviveplayer.isVR())
+    	{
+    		Vec3 vec32 = serverviveplayer.getControllerDir(serverviveplayer.activeHand);
+    		Vec3 vec3 = serverviveplayer.getControllerPos(serverviveplayer.activeHand, p_37106_);
+    		float f7 = -((float)Math.toDegrees(Math.asin(vec32.y / vec32.length())));
+    		float f6 = (float)Math.toDegrees(Math.atan2(-vec32.x, vec32.z));
+    		this.moveTo(vec3.x + vec32.x * (double)0.6F, vec3.y + vec32.y * (double)0.6F, vec3.z + vec32.z * (double)0.6F, f6, f7);
+    		f = f7;
+    		f1 = f6;
+    		f2 = Mth.cos(-f6 * ((float)Math.PI / 180F) - (float)Math.PI);
+    		f3 = Mth.sin(-f6 * ((float)Math.PI / 180F) - (float)Math.PI);
+    		f4 = -Mth.cos(-f7 * ((float)Math.PI / 180F));
+    		f5 = Mth.sin(-f7 * ((float)Math.PI / 180F));
+    	}
+    	else
+    	{
+    		double d0 = p_37106_.getX() - (double)f3 * 0.3D;
+    		double d1 = p_37106_.getEyeY();
+    		double d2 = p_37106_.getZ() - (double)f2 * 0.3D;
+    		this.moveTo(d0, d1, d2, f1, f);
+    	}
+
+    	Vec3 vec31 = new Vec3((double)(-f3), (double)Mth.clamp(-(f5 / f4), -5.0F, 5.0F), (double)(-f2));
+    	double d3 = vec31.length();
+    	vec31 = vec31.multiply(0.6D / d3 + 0.5D + this.random.nextGaussian() * 0.0045D, 0.6D / d3 + 0.5D + this.random.nextGaussian() * 0.0045D, 0.6D / d3 + 0.5D + this.random.nextGaussian() * 0.0045D);
+    	this.setDeltaMovement(vec31);
+    	this.setYRot((float)(Mth.atan2(vec31.x, vec31.z) * (double)(180F / (float)Math.PI)));
+    	this.setXRot((float)(Mth.atan2(vec31.y, vec31.horizontalDistance()) * (double)(180F / (float)Math.PI)));
+    	//
+    	this.yRotO = this.getYRot();
+    	this.xRotO = this.getXRot();
     }
 
     protected void defineSynchedData()
@@ -274,6 +301,16 @@
             this.setDeltaMovement(this.getDeltaMovement().scale(0.92D));
             this.reapplyPosition();
         }
+		//nibblehaptics
+        if (player != null && player.isLocalPlayer())
+        {
+            ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(player.getUUID());
+
+            if (serverviveplayer != null && serverviveplayer.isVR() && this.currentState == FishingHook.FishHookState.BOBBING && this.getDeltaMovement().y <= -0.24D)
+            {
+                MCVR.get().triggerHapticPulse(0, 250);
+            }
+        }
     }
 
     private boolean shouldStopFishing(Player p_37137_)
@@ -474,9 +511,9 @@
 
     private FishingHook.OpenWaterType getOpenWaterTypeForArea(BlockPos p_37148_, BlockPos p_37149_)
     {
-        return BlockPos.betweenClosedStream(p_37148_, p_37149_).map(this::getOpenWaterTypeForBlock).reduce((p_37139_, p_37140_) ->
+        return BlockPos.betweenClosedStream(p_37148_, p_37149_).map(this::getOpenWaterTypeForBlock).reduce((p_234601_0_, p_234601_1_) ->
         {
-            return p_37139_ == p_37140_ ? p_37139_ : FishingHook.OpenWaterType.INVALID;
+            return p_234601_0_ == p_234601_1_ ? p_234601_0_ : FishingHook.OpenWaterType.INVALID;
         }).orElse(FishingHook.OpenWaterType.INVALID);
     }
 
@@ -515,6 +552,7 @@
         if (!this.level.isClientSide && player != null && !this.shouldStopFishing(player))
         {
             int i = 0;
+            Object object = null;
 
             if (this.hookedIn != null)
             {
@@ -528,6 +566,15 @@
                 LootContext.Builder lootcontext$builder = (new LootContext.Builder((ServerLevel)this.level)).withParameter(LootContextParams.ORIGIN, this.position()).withParameter(LootContextParams.TOOL, p_37157_).withParameter(LootContextParams.THIS_ENTITY, this).withRandom(this.random).withLuck((float)this.luck + player.getLuck());
                 LootTable loottable = this.level.getServer().getLootTables().get(BuiltInLootTables.FISHING);
                 List<ItemStack> list = loottable.getRandomItems(lootcontext$builder.create(LootContextParamSets.FISHING));
+                object = Reflector.newInstance(Reflector.ItemFishedEvent_Constructor, list, this.onGround ? 2 : 1, this);
+                Reflector.postForgeBusEvent(object);
+
+                if (Reflector.callBoolean(object, Reflector.Event_isCanceled))
+                {
+                    this.discard();
+                    return Reflector.callInt(object, Reflector.ItemFishedEvent_getRodDamage);
+                }
+
                 CriteriaTriggers.FISHING_ROD_HOOKED.trigger((ServerPlayer)player, p_37157_, this, list);
 
                 for (ItemStack itemstack : list)
@@ -556,7 +603,7 @@
             }
 
             this.discard();
-            return i;
+            return object == null ? i : Reflector.callInt(object, Reflector.ItemFishedEvent_getRodDamage);
         }
         else
         {
@@ -617,6 +664,16 @@
         }
     }
 
+    public void remove(boolean keepData)
+    {
+        this.discard();
+
+        if (this.getPlayerOwner() != null)
+        {
+            this.getPlayerOwner().fishing = null;
+        }
+    }
+
     @Nullable
     public Player getPlayerOwner()
     {
