--- a/net/minecraft/client/Minecraft.java
+++ b/net/minecraft/client/Minecraft.java
@@ -32,6 +32,7 @@
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import com.mojang.math.Matrix4f;
+import com.mojang.math.Vector3f;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.JsonOps;
@@ -54,6 +55,7 @@
 import java.util.Locale;
 import java.util.MissingResourceException;
 import java.util.Queue;
+import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
@@ -162,6 +164,8 @@
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.particles.DustParticleOptions;
+import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
@@ -177,6 +181,7 @@
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
 import net.minecraft.network.protocol.login.ServerboundHelloPacket;
 import net.minecraft.resources.RegistryOps;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
 import net.minecraft.server.MinecraftServer;
@@ -245,14 +250,19 @@
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
+import net.optifine.reflect.Reflector;
+import net.optifine.reflect.ReflectorForge;
+
 import org.apache.commons.io.FileUtils;
 import org.lwjgl.util.tinyfd.TinyFileDialogs;
 import org.slf4j.Logger;
+import org.vivecraft.render.PlayerModelController;
 
-public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements WindowEventHandler
+public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements WindowEventHandler, net.minecraftforge.client.extensions.IForgeMinecraft
 {
     private static Minecraft instance;
     private static final Logger LOGGER = LogUtils.getLogger();
+    public final String minecriftVerString = "Vivecraft 1.18.2  jrbudda-NONVR-3-b5";
     public static final boolean ON_OSX = Util.getPlatform() == Util.OS.OSX;
     private static final int MAX_TICKS_PER_UPDATE = 10;
     public static final ResourceLocation DEFAULT_FONT = new ResourceLocation("default");
@@ -264,7 +274,7 @@
     public static final String UPDATE_DRIVERS_ADVICE = "Please make sure you have up-to-date drivers (see aka.ms/mcdriver for instructions).";
     private final File resourcePackDirectory;
     private final PropertyMap profileProperties;
-    private final TextureManager textureManager;
+    public final TextureManager textureManager;
     private final DataFixer fixerUpper;
     private final VirtualScreen virtualScreen;
     private final Window window;
@@ -400,8 +410,6 @@
         this.minecraftSessionService = yggdrasilauthenticationservice.createMinecraftSessionService();
         this.userApiService = this.createUserApiService(yggdrasilauthenticationservice, pGameConfig);
         this.user = pGameConfig.user.user;
-        LOGGER.info("Setting user: {}", (Object)this.user.getName());
-        LOGGER.debug("(Session ID is {})", (Object)this.user.getSessionId());
         this.demo = pGameConfig.game.demo;
         this.allowsMultiplayer = !pGameConfig.game.disableMultiplayer;
         this.allowsChat = !pGameConfig.game.disableChat;
@@ -441,6 +449,9 @@
         }
 
         Util.timeSource = RenderSystem.initBackendSystem();
+        if(ReflectorForge.getConfigClientBoolean(Reflector.ForgeConfig_Client_forceSystemNanoTime, false))
+			Util.timeSource = System::nanoTime;
+
         this.virtualScreen = new VirtualScreen(this);
         this.window = this.virtualScreen.newWindow(displaydata, this.options.fullscreenVideoModeString, this.createTitle());
         this.setWindowActive(true);
@@ -461,7 +472,10 @@
 
         this.window.setFramerateLimit(this.options.framerateLimit);
         this.mouseHandler = new MouseHandler(this);
-        this.mouseHandler.setup(this.window.getWindow());
+		//Forge
+		//this.mouseHandler.setup(this.window.getWindow());
+		//
+        
         this.keyboardHandler = new KeyboardHandler(this);
         this.keyboardHandler.setup(this.window.getWindow());
         RenderSystem.initRenderer(this.options.glDebugVerbosity, false);
@@ -469,6 +483,9 @@
         this.mainRenderTarget.setClearColor(0.0F, 0.0F, 0.0F, 0.0F);
         this.mainRenderTarget.clear(ON_OSX);
         this.resourceManager = new ReloadableResourceManager(PackType.CLIENT_RESOURCES);
+		//Forge
+		Reflector.call(Reflector.ClientModLoader_begin, this, this.resourcePackRepository, this.resourceManager, this.clientPackSource);
+		//
         this.resourcePackRepository.reload();
         this.options.loadSelectedResourcePacks(this.resourcePackRepository);
         this.languageManager = new LanguageManager(this.options.languageCode);
@@ -517,6 +534,9 @@
         this.createSearchTrees();
         this.resourceManager.registerReloadListener(this.searchRegistry);
         this.particleEngine = new ParticleEngine(this.level, this.textureManager);
+		//Forge
+		Reflector.call(Reflector.call(Reflector.fml_ModLoader_get), Reflector.fml_ModLoader_postEvent, Reflector.newInstance(Reflector.ParticleFactoryRegisterEvent_Constructor));
+		//
         this.resourceManager.registerReloadListener(this.particleEngine);
         this.paintingTextures = new PaintingTextureManager(this.textureManager);
         this.resourceManager.registerReloadListener(this.paintingTextures);
@@ -525,7 +545,17 @@
         this.gpuWarnlistManager = new GpuWarnlistManager();
         this.resourceManager.registerReloadListener(this.gpuWarnlistManager);
         this.resourceManager.registerReloadListener(this.regionalCompliancies);
-        this.gui = new Gui(this);
+		if (Reflector.ForgeIngameGui_Constructor.exists())
+		{
+			this.gui = (Gui)Reflector.newInstance(Reflector.ForgeIngameGui_Constructor, this);
+		}
+		else
+		{
+			this.gui = new Gui(this);
+		}
+
+		this.mouseHandler.setup(this.window.getWindow()); //Forge: Moved below ingameGUI setting to prevent NPEs in handeler.
+
         this.debugRenderer = new DebugRenderer(this);
         RenderSystem.setErrorCallback(this::onFullscreenError);
 
@@ -550,6 +580,11 @@
             TinyFileDialogs.tinyfd_messageBox("Minecraft", stringbuilder.toString(), "ok", "error", false);
         }
 
+		//Forge
+		Reflector.call(Reflector.call(Reflector.fml_ModLoader_get), Reflector.fml_ModLoader_postEvent, Reflector.newInstance(Reflector.RegisterClientReloadListenersEvent_Constructor,this.resourceManager));
+		Reflector.call(Reflector.call(Reflector.fml_ModLoader_get), Reflector.fml_ModLoader_postEvent, Reflector.newInstance(Reflector.EntityRenderersEvent_RegisterLayerDefinitions_Constructor));
+		Reflector.call(Reflector.call(Reflector.fml_ModLoader_get), Reflector.fml_ModLoader_postEvent, Reflector.newInstance(Reflector.EntityRenderersEvent_RegisterRenderers_Constructor));
+		//
         this.window.updateVsync(this.options.enableVsync);
         this.window.updateRawMouseInput(this.options.rawMouseInput);
         this.window.setDefaultErrorCallback();
@@ -560,24 +595,27 @@
         this.reloadStateTracker.startReload(ResourceLoadStateTracker.ReloadReason.INITIAL, list);
         this.setOverlay(new LoadingOverlay(this, this.resourceManager.createReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, list), (p_210745_) ->
         {
-            Util.ifElse(p_210745_, this::rollbackResourcePacks, () -> {
-                if (SharedConstants.IS_RUNNING_IN_IDE)
-                {
-                    this.selfTest();
-                }
-
-                this.reloadStateTracker.finishReload();
-            });
+        	Util.ifElse(p_210745_, this::rollbackResourcePacks, () -> {
+        		if (SharedConstants.IS_RUNNING_IN_IDE)
+        		{
+        			this.selfTest();
+        		}
+
+        		this.reloadStateTracker.finishReload();
+        		//Forge
+        		if (Reflector.callBoolean(Reflector.ClientModLoader_completeModLoading)) return;
+
+        		if (s != null)
+        		{
+        			ConnectScreen.startConnecting(new TitleScreen(), this, new ServerAddress(s, i), (ServerData)null);
+        		}
+        		else
+        		{
+        			this.setScreen(new TitleScreen(true));
+        		}
+        		//
+        	});
         }, false));
-
-        if (s != null)
-        {
-            ConnectScreen.startConnecting(new TitleScreen(), this, new ServerAddress(s, i), (ServerData)null);
-        }
-        else
-        {
-            this.setScreen(new TitleScreen(true));
-        }
     }
 
     private static boolean countryEqualsISO3(Object p_210783_)
@@ -599,7 +637,7 @@
 
     private String createTitle()
     {
-        StringBuilder stringbuilder = new StringBuilder("Minecraft");
+        StringBuilder stringbuilder = new StringBuilder(minecriftVerString);
 
         if (checkModStatus().shouldReportAsModified())
         {
@@ -653,14 +691,10 @@
         return ModCheck.identify("vanilla", ClientBrandRetriever::getClientModName, "Client", Minecraft.class);
     }
 
-    private void rollbackResourcePacks(Throwable p_91240_)
-    {
-        if (this.resourcePackRepository.getSelectedIds().size() > 1)
-        {
+    private void rollbackResourcePacks(Throwable p_91240_) {
+        if (this.resourcePackRepository.getSelectedPacks().stream().anyMatch(e -> !e.isRequired())) { //Forge: This caused infinite loop if any resource packs are forced. Such as mod resources. So check if we can disable any.
             this.clearResourcePacksOnError(p_91240_, (Component)null);
-        }
-        else
-        {
+        } else {
             Util.throwAsRuntime(p_91240_);
         }
     }
@@ -797,7 +831,7 @@
         this.searchRegistry.register(SearchRegistry.CREATIVE_TAGS, reloadableidsearchtree);
         this.searchRegistry.register(SearchRegistry.RECIPE_COLLECTIONS, reloadablesearchtree1);
     }
-
+    
     private void onFullscreenError(int p_91114_, long p_91115_)
     {
         this.options.enableVsync = false;
@@ -850,19 +884,44 @@
         if (pReport.getSaveFile() != null)
         {
             Bootstrap.realStdoutPrintln("#@!@# Game crashed! Crash report saved to: #@!@# " + pReport.getSaveFile());
+            //Forge
+            if (Reflector.ServerLifecycleHooks_handleExit.exists())
+            {
+                Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -1);
+            }
+            else
+            {
             System.exit(-1);
         }
+            //
+        }
         else if (pReport.saveToFile(file2))
         {
             Bootstrap.realStdoutPrintln("#@!@# Game crashed! Crash report saved to: #@!@# " + file2.getAbsolutePath());
+            //Forge
+            if (Reflector.ServerLifecycleHooks_handleExit.exists())
+            {
+                Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -1);
+            }
+            else
+            {
             System.exit(-1);
         }
+            //
+        }
         else
         {
             Bootstrap.realStdoutPrintln("#@?@# Game crashed! Crash report could not be saved. #@?@#");
+            if (Reflector.ServerLifecycleHooks_handleExit.exists())
+            {
+                Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -2);
+            }
+            else
+            {
             System.exit(-2);
         }
     }
+    }
 
     public boolean isEnforceUnicode()
     {
@@ -1005,10 +1064,12 @@
             LOGGER.error("setScreen called from non-game thread");
         }
 
-        if (this.screen != null)
-        {
-            this.screen.removed();
-        }
+        //Forge
+        //if (this.screen != null)
+        //{
+        //    this.screen.removed();
+        //}
+        //
 
         if (pGuiScreen == null && this.level == null)
         {
@@ -1026,6 +1087,23 @@
             }
         }
 
+        //Forge
+        Reflector.call(Reflector.ForgeHooksClient_clearGuiLayers, this);
+        Screen screen = this.screen;
+        Object object = Reflector.newInstance(Reflector.ScreenOpenEvent_Constructor, pGuiScreen);
+        if (object != null)
+        {
+            if (Reflector.postForgeBusEvent(object))
+            {
+                return;
+            }
+
+            pGuiScreen = (Screen)Reflector.call(object, Reflector.ScreenOpenEvent_getScreen);
+        }
+        
+        if (screen != null && pGuiScreen != screen)
+        	screen.removed();
+        //
         this.screen = pGuiScreen;
         BufferUploader.reset();
 
@@ -1326,6 +1404,9 @@
         if (this.screen != null)
         {
             this.screen.resize(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
+            //FORGE
+            Reflector.call(Reflector.ForgeHooksClient_resizeGuiLayers, this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
+            //
         }
 
         RenderTarget rendertarget = this.getMainRenderTarget();
@@ -1714,17 +1795,45 @@
             {
                 BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
                 BlockPos blockpos = blockhitresult.getBlockPos();
+                Object object = null;
 
-                if (!this.level.getBlockState(blockpos).isAir())
+                if (!this.level.isEmptyBlock(blockpos))
                 {
-                    Direction direction = blockhitresult.getDirection();
+                	//Forge
+                    object = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 0, this.options.keyAttack, InteractionHand.MAIN_HAND);
 
+                    if (object != null && Reflector.callBoolean(object, Reflector.Event_isCanceled))
+                    {
+                        if (Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
+                        {
+                            this.particleEngine.addBlockHitEffects(blockpos, blockhitresult);
+                            this.player.swing(InteractionHand.MAIN_HAND);
+                        }
+
+                        return;
+                    }
+                    //
+                    
+                    Direction direction = blockhitresult.getDirection();
+                    //Forge
                     if (this.gameMode.continueDestroyBlock(blockpos, direction))
                     {
+                        if (object != null)
+                        {
+                            if (Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
+                            {
+                                this.particleEngine.addBlockHitEffects(blockpos, blockhitresult);
+                                this.player.swing(InteractionHand.MAIN_HAND);
+                            }
+                        }
+                        else
+                        {
                         this.particleEngine.crack(blockpos, direction);
-                        this.player.swing(InteractionHand.MAIN_HAND);
+                            this.player.swing(InteractionHand.MAIN_HAND);
                     }
                 }
+                    //
+            }
             }
             else
             {
@@ -1787,9 +1896,15 @@
                     }
 
                     this.player.resetAttackStrengthTicker();
+                    Reflector.call(Reflector.ForgeHooks_onEmptyLeftClick, this.player);
             }
 
+            Object object = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 0, this.options.keyAttack, InteractionHand.MAIN_HAND);
+
+            if (object == null || Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
+            {
             this.player.swing(InteractionHand.MAIN_HAND);
+                            }
             return flag;
         }
     }
@@ -1809,6 +1924,17 @@
 
                 for (InteractionHand interactionhand : InteractionHand.values())
                 {
+                    Object object = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 1, this.options.keyUse, interactionhand);
+
+                    if (object != null && Reflector.callBoolean(object, Reflector.Event_isCanceled))
+                    {
+                        if (Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
+                        {
+                            this.player.swing(interactionhand);
+                        }
+
+                        return;
+                    }
                     ItemStack itemstack = this.player.getItemInHand(interactionhand);
 
                     if (this.hitResult != null)
@@ -1833,9 +1959,9 @@
 
                                 if (interactionresult.consumesAction())
                                 {
-                                    if (interactionresult.shouldSwing())
+                                        if (interactionresult.shouldSwing() && (object == null || Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand)))
                                     {
-                                        this.player.swing(interactionhand);
+                                            this.player.swing(interactionhand);
                                     }
 
                                     return;
@@ -1852,7 +1978,10 @@
                                 {
                                     if (interactionresult1.shouldSwing())
                                     {
-                                        this.player.swing(interactionhand);
+                                            if (object == null || Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
+                                            {
+                                                this.player.swing(interactionhand);
+                                            }
 
                                         if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.gameMode.hasInfiniteItems()))
                                         {
@@ -1870,6 +1999,10 @@
                         }
                     }
 
+                        if (itemstack.isEmpty() && (this.hitResult == null || this.hitResult.getType() == HitResult.Type.MISS))
+                        {
+                            Reflector.call(Reflector.ForgeHooks_onEmptyClick, this.player, interactionhand);
+                        }
                     if (!itemstack.isEmpty())
                     {
                         InteractionResult interactionresult2 = this.gameMode.useItem(this.player, this.level, interactionhand);
@@ -1901,7 +2034,9 @@
         {
             --this.rightClickDelay;
         }
-
+        //Forge
+        Reflector.call(Reflector.BasicEventHooks_onPreClientTick);
+        //
         this.profiler.push("gui");
         this.gui.tick(this.pause);
         this.profiler.pop();
@@ -2008,7 +2143,9 @@
         {
             this.gameRenderer.shutdownEffect();
         }
-
+        //Vivecraft
+        PlayerModelController.getInstance().tick();
+        //
         if (!this.pause)
         {
             this.musicManager.tick();
@@ -2080,6 +2217,9 @@
         this.profiler.popPush("keyboard");
         this.keyboardHandler.tick();
         this.profiler.pop();
+        //Forge
+        Reflector.call(Reflector.BasicEventHooks_onPostClientTick);
+        //
     }
 
     private boolean isMultiplayerServer()
@@ -2244,30 +2384,30 @@
 
     public void loadLevel(String pLevelName)
     {
-        this.doLoadLevel(pLevelName, WorldStem.DataPackConfigSupplier::loadFromWorld, WorldStem.WorldDataSupplier::loadFromWorld, false, Minecraft.ExperimentalDialogType.BACKUP);
+    	//Forge
+        this.doLoadLevel(pLevelName, WorldStem.DataPackConfigSupplier::loadFromWorld, WorldStem.WorldDataSupplier::loadFromWorld, false, Minecraft.ExperimentalDialogType.BACKUP, false);
+        //
     }
 
-    public void createLevel(String pLevelName, LevelSettings pLevelSettings, RegistryAccess pDynamicRegistries, WorldGenSettings pDimensionGeneratorSettings)
-    {
-        this.doLoadLevel(pLevelName, (p_210684_) ->
-        {
-            return pLevelSettings::getDataPackConfig;
-        }, (p_210718_) ->
-        {
+    public void createLevel(String p_205186_, LevelSettings p_205187_, RegistryAccess p_205188_, WorldGenSettings p_205189_) {
+        this.doLoadLevel(p_205186_, (p_210684_) -> {
+           return p_205187_::getDataPackConfig;
+        }, (p_210718_) -> {
             return (p_210712_, p_210713_) -> {
                 RegistryAccess.Writable registryaccess$writable = RegistryAccess.builtinCopy();
-                DynamicOps<JsonElement> dynamicops = RegistryOps.create(JsonOps.INSTANCE, pDynamicRegistries);
+              DynamicOps<JsonElement> dynamicops = RegistryOps.create(JsonOps.INSTANCE, p_205188_);
                 DynamicOps<JsonElement> dynamicops1 = RegistryOps.createAndLoad(JsonOps.INSTANCE, registryaccess$writable, p_210712_);
-                DataResult<WorldGenSettings> dataresult = WorldGenSettings.CODEC.encodeStart(dynamicops, pDimensionGeneratorSettings).setLifecycle(Lifecycle.stable()).flatMap((p_210687_) -> {
+              DataResult<WorldGenSettings> dataresult = WorldGenSettings.CODEC.encodeStart(dynamicops, p_205189_).setLifecycle(Lifecycle.stable()).flatMap((p_210687_) -> {
                     return WorldGenSettings.CODEC.parse(dynamicops1, p_210687_);
                 });
                 WorldGenSettings worldgensettings = dataresult.getOrThrow(false, Util.prefix("Error reading worldgen settings after loading data packs: ", LOGGER::error));
-                return Pair.of(new PrimaryLevelData(pLevelSettings, worldgensettings, dataresult.lifecycle()), registryaccess$writable.freeze());
+              return Pair.of(new PrimaryLevelData(p_205187_, worldgensettings, dataresult.lifecycle()), registryaccess$writable.freeze());
             };
-        }, false, Minecraft.ExperimentalDialogType.CREATE);
+        }, false, Minecraft.ExperimentalDialogType.CREATE, true);
     }
 
-    private void doLoadLevel(String p_205206_, Function<LevelStorageSource.LevelStorageAccess, WorldStem.DataPackConfigSupplier> p_205207_, Function<LevelStorageSource.LevelStorageAccess, WorldStem.WorldDataSupplier> p_205208_, boolean p_205209_, Minecraft.ExperimentalDialogType p_205210_)
+    //Forge change sig
+    private void doLoadLevel(String p_205206_, Function<LevelStorageSource.LevelStorageAccess, WorldStem.DataPackConfigSupplier> p_205207_, Function<LevelStorageSource.LevelStorageAccess, WorldStem.WorldDataSupplier> p_205208_, boolean p_205209_, Minecraft.ExperimentalDialogType p_205210_, boolean creating)
     {
         LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess;
 
@@ -2295,7 +2435,7 @@
             LOGGER.warn("Failed to load datapacks, can't proceed with server load", (Throwable)exception);
             this.setScreen(new DatapackLoadFailureScreen(() ->
             {
-                this.doLoadLevel(p_205206_, p_205207_, p_205208_, true, p_205210_);
+                this.doLoadLevel(p_205206_, p_205207_, p_205208_, true, p_205210_, creating);
             }));
 
             try
@@ -2334,7 +2474,9 @@
                 GameProfileCache.setUsesAuthentication(false);
                 this.singleplayerServer = MinecraftServer.spin((p_210695_) ->
                 {
+                    //Forge
                     return new IntegratedServer(p_210695_, this, levelstoragesource$levelstorageaccess, packrepository, worldstem, minecraftsessionservice, gameprofilerepository, gameprofilecache, (p_210795_) -> {
+                	//
                         StoringChunkProgressListener storingchunkprogresslistener = new StoringChunkProgressListener(p_210795_ + 0);
                         this.progressListener.set(storingchunkprogresslistener);
                         return ProcessorChunkProgressListener.createStarted(storingchunkprogresslistener, this.progressTasks::add);
@@ -2387,14 +2529,24 @@
             {
             }));
             connection.send(new ClientIntentionPacket(socketaddress.toString(), 0, ConnectionProtocol.LOGIN));
-            connection.send(new ServerboundHelloPacket(this.getUser().getGameProfile()));
+            
+            //Forge
+            com.mojang.authlib.GameProfile gameProfile = this.getUser().getGameProfile();
+            if((Reflector.ForgeSession_hasCachedProperties.exists() && !Reflector.callBoolean(this.getUser(),Reflector.ForgeSession_hasCachedProperties))) {
+               gameProfile = minecraftSessionService.fillProfileProperties(gameProfile, true); //Forge: Fill profile properties upon game load. Fixes MC-52974.
+               Reflector.call(this.getUser(), Reflector.ForgeSession_setProperties, gameProfile.getProperties());
+            }
+            connection.send(new ServerboundHelloPacket(gameProfile));
+            //
             this.pendingConnection = connection;
         }
         else
         {
             this.displayExperimentalConfirmationDialog(p_205210_, p_205206_, flag, () ->
             {
-                this.doLoadLevel(p_205206_, p_205207_, p_205208_, p_205209_, Minecraft.ExperimentalDialogType.NONE);
+            	//Forge
+                this.doLoadLevel(p_205206_, p_205207_, p_205208_, p_205209_, Minecraft.ExperimentalDialogType.NONE, creating);
+                //
             });
             worldstem.close();
 
@@ -2477,10 +2629,10 @@
                             levelstoragesource$levelstorageaccess.close();
                         }
                     }
-                    catch (IOException ioexception)
+                    catch (IOException ioexception1)
                     {
                         SystemToast.onWorldDeleteFailure(this, pLevelName);
-                        LOGGER.error("Failed to delete world {}", pLevelName, ioexception);
+                        LOGGER.error("Failed to delete world {}", pLevelName, ioexception1);
                     }
                 }
             }, new TranslatableComponent("selectWorld.backupQuestion.experimental"), new TranslatableComponent("selectWorld.backupWarning.experimental"), CommonComponents.GUI_PROCEED, CommonComponents.GUI_CANCEL));
@@ -2516,6 +2668,12 @@
 
     public void setLevel(ClientLevel pLevelClient)
     {
+        //Forge
+        if (this.level != null)
+        {
+            Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.WorldEvent_Unload_Constructor, this.level));
+        }
+        //
         ProgressScreen progressscreen = new ProgressScreen(true);
         progressscreen.progressStartNoAbort(new TranslatableComponent("connect.joining"));
         this.updateScreenAndTick(progressscreen);
@@ -2553,12 +2711,18 @@
         IntegratedServer integratedserver = this.singleplayerServer;
         this.singleplayerServer = null;
         this.gameRenderer.resetData();
+        //Forge
+        Reflector.call(Reflector.ClientHooks_firePlayerLogout, this.gameMode, this.player);
+        //
         this.gameMode = null;
         NarratorChatListener.INSTANCE.clear();
         this.updateScreenAndTick(pScreen);
 
         if (this.level != null)
         {
+        	//Forge
+            Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.WorldEvent_Unload_Constructor, this.level));
+            //
             if (integratedserver != null)
             {
                 this.profiler.push("waitForServer");
@@ -2575,6 +2739,9 @@
             this.gui.onDisconnected();
             this.currentServer = null;
             this.isLocalServer = false;
+            //Forge
+            Reflector.call(Reflector.ClientHooks_handleClientWorldClosing, this.level);
+            //
             this.game.onLeaveGameSession();
         }
 
@@ -2684,6 +2851,19 @@
     {
         if (this.hitResult != null && this.hitResult.getType() != HitResult.Type.MISS)
         {
+        	//Forge
+            Object object = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 2, this.options.keyPickItem, InteractionHand.MAIN_HAND);
+
+            if (object != null && !Reflector.callBoolean(object, Reflector.Event_isCanceled))
+            {
+                Reflector.call(Reflector.ForgeHooks_onPickBlock, this.hitResult, this.player, this.level);
+            }
+
+            if (object != null)
+            {
+                return;
+            }
+            //
             boolean flag = this.player.getAbilities().instabuild;
             BlockEntity blockentity = null;
             HitResult.Type hitresult$type = this.hitResult.getType();
@@ -3389,24 +3569,38 @@
     {
         return this.renderBuffers;
     }
-
-    private static Pack createClientPackAdapter(String p_167934_, Component p_167935_, boolean p_167936_, Supplier<PackResources> p_167937_, PackMetadataSection p_167938_, Pack.Position p_167939_, PackSource p_167940_)
-    {
+    
+    private static Pack createClientPackAdapter(String p_167934_, Component p_167935_, boolean p_167936_, Supplier<PackResources> p_167937_, PackMetadataSection p_167938_, Pack.Position p_167939_, PackSource p_167940_, boolean hidden) {
         int i = p_167938_.getPackFormat();
         Supplier<PackResources> supplier = p_167937_;
-
-        if (i <= 3)
-        {
-            supplier = adaptV3(p_167937_);
+        if (i <= 3) {
+           supplier = adaptV3(p_167937_);
         }
 
-        if (i <= 4)
-        {
-            supplier = adaptV4(supplier);
+        if (i <= 4) {
+           supplier = adaptV4(supplier);
         }
 
-        return new Pack(p_167934_, p_167935_, p_167936_, supplier, p_167938_, PackType.CLIENT_RESOURCES, p_167939_, p_167940_);
-    }
+        return new Pack(p_167934_, p_167935_, p_167936_, supplier, p_167938_, PackType.CLIENT_RESOURCES, p_167939_, p_167940_, hidden);
+     }
+    
+//    private static Pack createClientPackAdapter(String p_167934_, Component p_167935_, boolean p_167936_, Supplier<PackResources> p_167937_, PackMetadataSection p_167938_, Pack.Position p_167939_, PackSource p_167940_)
+//    {
+//        int i = p_167938_.getPackFormat();
+//        Supplier<PackResources> supplier = p_167937_;
+//
+//        if (i <= 3)
+//        {
+//            supplier = adaptV3(p_167937_);
+//        }
+//
+//        if (i <= 4)
+//        {
+//            supplier = adaptV4(supplier);
+//        }
+//
+//        return new Pack(p_167934_, p_167935_, p_167936_, supplier, p_167938_, PackType.CLIENT_RESOURCES, p_167939_, p_167940_);
+//    }
 
     private static Supplier<PackResources> adaptV3(Supplier<PackResources> pResourcePackSupplier)
     {
@@ -3496,4 +3690,15 @@
         CREATE,
         BACKUP;
     }
+    //Forge
+    public ItemColors getItemColors()
+    {
+        return this.itemColors;
+    }
+
+    public SearchRegistry getSearchTreeManager()
+    {
+        return this.searchRegistry;
+    }
+    //
 }
